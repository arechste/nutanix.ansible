---
- name: Start Protection Policy related tests
  ansible.builtin.debug:
    msg: Start Protection Policy related tests

- name: Generate random names
  ansible.builtin.set_fact:
    random_name: "{{query('community.general.random_string',numbers=false, special=false,length=12)[0]}}"
    label1: "{{query('community.general.random_string',numbers=false, special=false,length=12)[0]}}"
    label2: "{{query('community.general.random_string',numbers=false, special=false,length=12)[0]}}"
    suffix_name: "ansible-category"
    todelete_categories: []
    todelete: []

- name: Set ansible keys and values
  ansible.builtin.set_fact:
    keys:
      - "{{random_name}}{{suffix_name}}key1"
      - "{{random_name}}{{suffix_name}}key2"
      - "{{random_name}}{{suffix_name}}key3"
    values:
      - "{{random_name}}{{suffix_name}}value1"
      - "{{random_name}}{{suffix_name}}value2"
      - "{{random_name}}{{suffix_name}}value3"

- name: Create categories for protection policies
  ntnx_categories_v2:
    key: "{{ keys[item] }}"
    value: "{{ values[item] }}"
    description: "ansible-category"
  register: output
  ignore_errors: true
  loop: "{{ range(0, 3) }}"
  loop_control:
    label: "{{ item }}"

- name: Create categories for protection policies status
  ansible.builtin.assert:
    that:
      - output is defined
      - output.changed == true
      - output.results | length == 3
      - output.msg == "All items completed"
    success_msg: "Categories created successfully"
    fail_msg: "Categories creation failed"

- name: Save external IDs to the list
  set_fact:
    todelete_categories: "{{ todelete_categories + [ item.response.ext_id ] }}"
  with_items: "{{ output.results }}"

- name: Set categories external ids
  ansible.builtin.set_fact:
    category_ext_id_1: "{{ todelete_categories[0] }}"
    category_ext_id_2: "{{ todelete_categories[1] }}"
    category_ext_id_3: "{{ todelete_categories[2] }}"

- name: List all clusters to get prism central external ID
  ntnx_clusters_info_v2:
    filter: "config/clusterFunction/any(t:t eq Clustermgmt.Config.ClusterFunctionRef'PRISM_CENTRAL')"
  register: result
  ignore_errors: true

- name: Get prism central external ID
  ansible.builtin.set_fact:
    domain_manager_ext_id: "{{ result.response[0].ext_id }}"

########################################################################################

- name: Generate spec for creating protection policy using check mode
  nutanix.ncp.ntnx_protection_policies_v2:
    name: "ansible-name-test-{{random_name}}"
    description: "ansible-description-test-{{random_name}}"
    replication_locations:
      - "{{ replication_location_1}}"
      - "{{ replication_location_2}}"
    replication_configurations:
      - source_location_label: "{{ replication_configuration_linear_1.source_location_label }}"
        remote_location_label: "{{ replication_configuration_linear_1.remote_location_label }}"
        schedule:
          recovery_point_type: "{{ replication_configuration_linear_1.schedule.recovery_point_type }}"
          recovery_point_objective_time_seconds: "{{ replication_configuration_linear_1.schedule.recovery_point_objective_time_seconds | int }}"
          retention:
            linear_retention:
              local: "{{ replication_configuration_linear_1.schedule.retention.local }}"
              remote: "{{ replication_configuration_linear_1.schedule.retention.remote }}"
          start_time: "{{ replication_configuration_linear_1.schedule.start_time }}"
          sync_replication_auto_suspend_timeout_seconds: "{{ replication_configuration_linear_1.schedule.sync_replication_auto_suspend_timeout_seconds }}"
      - source_location_label: "{{  replication_configuration_linear_2.source_location_label }}"
        remote_location_label: "{{ replication_configuration_linear_2.remote_location_label }}"
        schedule:
          recovery_point_type: "{{ replication_configuration_linear_2.schedule.recovery_point_type }}"
          recovery_point_objective_time_seconds: "{{ replication_configuration_linear_2.schedule.recovery_point_objective_time_seconds | int }}"
          retention:
            linear_retention:
              local: "{{ replication_configuration_linear_2.schedule.retention.local }}"
              remote: "{{ replication_configuration_linear_2.schedule.retention.remote }}"
          start_time: "{{ replication_configuration_linear_2.schedule.start_time }}"
          sync_replication_auto_suspend_timeout_seconds: "{{ replication_configuration_linear_2.schedule.sync_replication_auto_suspend_timeout_seconds }}"
    category_ids:
      - "00000000-0000-0000-0000-000000000000"
  register: result
  ignore_errors: true
  check_mode: true

- name: Status for generating spec for creating protection policy using check mode
  ansible.builtin.assert:
    that:
      - result.changed == false
      - result.failed == false
      - result.response is defined
      - result.response.name == "ansible-name-test-{{random_name}}"
      - result.response.description == "ansible-description-test-{{random_name}}"
      - result.response.replication_locations[0] == replication_location_1_expected
        or result.response.replication_locations[0] == replication_location_2_expected
      - result.response.replication_locations[1] == replication_location_1_expected
        or result.response.replication_locations[1] == replication_location_2_expected
      - result.response.replication_configurations[0] == replication_configuration_linear_1
        or result.response.replication_configurations[0] == replication_configuration_linear_2
      - result.response.replication_configurations[1] == replication_configuration_linear_1
        or result.response.replication_configurations[1] == replication_configuration_linear_2
      - result.response.replication_locations[0] != result.response.replication_locations[1]
      - result.response.replication_configurations[0] != result.response.replication_configurations[1]
      - result.response.category_ids[0] == "00000000-0000-0000-0000-000000000000"
    success_msg: "Protection policy spec generated successfully"
    fail_msg: "Protection policy spec generation failed"

########################################################################################

- name: Create linear retention protection policy
  nutanix.ncp.ntnx_protection_policies_v2:
    name: "ansible-name-linear-{{random_name}}"
    description: "ansible-description-linear-{{random_name}}"
    replication_locations:
      - "{{ replication_location_1 }}"
      - "{{ replication_location_2 }}"
    replication_configurations:
      - source_location_label: "{{ replication_configuration_linear_1.source_location_label }}"
        remote_location_label: "{{ replication_configuration_linear_1.remote_location_label }}"
        schedule:
          recovery_point_type: "{{ replication_configuration_linear_1.schedule.recovery_point_type }}"
          recovery_point_objective_time_seconds: "{{ replication_configuration_linear_1.schedule.recovery_point_objective_time_seconds | int }}"
          retention:
            linear_retention:
              local: "{{ replication_configuration_linear_1.schedule.retention.local }}"
              remote: "{{ replication_configuration_linear_1.schedule.retention.remote }}"
          start_time: "{{ replication_configuration_linear_1.schedule.start_time }}"
          sync_replication_auto_suspend_timeout_seconds: "{{ replication_configuration_linear_1.schedule.sync_replication_auto_suspend_timeout_seconds }}"
      - source_location_label: "{{ replication_configuration_linear_2.source_location_label }}"
        remote_location_label: "{{ replication_configuration_linear_2.remote_location_label }}"
        schedule:
          recovery_point_type: "{{ replication_configuration_linear_2.schedule.recovery_point_type }}"
          recovery_point_objective_time_seconds: "{{ replication_configuration_linear_2.schedule.recovery_point_objective_time_seconds | int }}"
          retention:
            linear_retention:
              local: "{{ replication_configuration_linear_2.schedule.retention.local }}"
              remote: "{{ replication_configuration_linear_2.schedule.retention.remote }}"
          start_time: "{{ replication_configuration_linear_2.schedule.start_time }}"
          sync_replication_auto_suspend_timeout_seconds: "{{ replication_configuration_linear_2.schedule.sync_replication_auto_suspend_timeout_seconds }}"
    category_ids:
      - "{{category_ext_id_1}}"
  register: result
  ignore_errors: true

- name: Status for creating linear retention protection policy
  ansible.builtin.assert:
    that:
      - result.changed == true
      - result.failed == false
      - result.response is defined
      - result.response.ext_id == result.protection_policy_ext_id
      - result.response.name == "ansible-name-linear-{{random_name}}"
      - result.response.description == "ansible-description-linear-{{random_name}}"
      - result.response.replication_locations[0] == replication_location_1_expected
        or result.response.replication_locations[0] == replication_location_2_expected
      - result.response.replication_locations[1] == replication_location_1_expected
        or result.response.replication_locations[1] == replication_location_2_expected
      - result.response.replication_locations[0] != result.response.replication_locations[1]
      - result.response.replication_configurations[0] == replication_configuration_linear_1
        or result.response.replication_configurations[0] == replication_configuration_linear_2
      - result.response.replication_configurations[1] == replication_configuration_linear_1
        or result.response.replication_configurations[1] == replication_configuration_linear_2
      - result.response.replication_configurations[0] != result.response.replication_configurations[1]
      - result.response.category_ids[0] == "{{category_ext_id_1}}"
    success_msg: "Protection policy created successfully"
    fail_msg: "Protection policy creation failed"

- name: Add retention policy external ID to todelete list
  ansible.builtin.set_fact:
    todelete: "{{ todelete + [result.response.ext_id] }}"

########################################################################################

- name: Create auto retention protection policy
  nutanix.ncp.ntnx_protection_policies_v2:
    name: "ansible-name-auto-{{random_name}}"
    description: "ansible-description-auto-{{random_name}}"
    replication_locations:
      - "{{ replication_location_1 }}"
      - "{{ replication_location_2 }}"
    replication_configurations:
      - source_location_label: "{{ replication_configuration_auto_1.source_location_label }}"
        remote_location_label: "{{ replication_configuration_auto_1.remote_location_label }}"
        schedule:
          recovery_point_type: "{{ replication_configuration_auto_1.schedule.recovery_point_type }}"
          recovery_point_objective_time_seconds: "{{ replication_configuration_auto_1.schedule.recovery_point_objective_time_seconds | int }}"
          retention:
            auto_rollup_retention:
              local:
                snapshot_interval_type: "{{ replication_configuration_auto_1.schedule.retention.local.snapshot_interval_type }}"
                frequency: "{{ replication_configuration_auto_1.schedule.retention.local.frequency }}"
              remote:
                snapshot_interval_type: "{{ replication_configuration_auto_1.schedule.retention.remote.snapshot_interval_type }}"
                frequency: "{{ replication_configuration_auto_1.schedule.retention.remote.frequency }}"
          sync_replication_auto_suspend_timeout_seconds: "{{ replication_configuration_auto_1.schedule.sync_replication_auto_suspend_timeout_seconds }}"
      - source_location_label: "{{ replication_configuration_auto_2.source_location_label }}"
        remote_location_label: "{{ replication_configuration_auto_2.remote_location_label }}"
        schedule:
          recovery_point_type: "{{ replication_configuration_auto_2.schedule.recovery_point_type }}"
          recovery_point_objective_time_seconds: "{{ replication_configuration_auto_2.schedule.recovery_point_objective_time_seconds | int }}"
          retention:
            auto_rollup_retention:
              local:
                snapshot_interval_type: "{{ replication_configuration_auto_2.schedule.retention.local.snapshot_interval_type }}"
                frequency: "{{ replication_configuration_auto_2.schedule.retention.local.frequency }}"
              remote:
                snapshot_interval_type: "{{ replication_configuration_auto_2.schedule.retention.remote.snapshot_interval_type }}"
                frequency: "{{ replication_configuration_auto_2.schedule.retention.remote.frequency }}"
          sync_replication_auto_suspend_timeout_seconds: "{{ replication_configuration_auto_2.schedule.sync_replication_auto_suspend_timeout_seconds }}"
    category_ids:
      - "{{category_ext_id_2}}"
  register: result
  ignore_errors: true

- name: Status for creating auto retention protection policy
  ansible.builtin.assert:
    that:
      - result.changed == true
      - result.failed == false
      - result.response is defined
      - result.response.ext_id == result.protection_policy_ext_id
      - result.response.name == "ansible-name-auto-{{random_name}}"
      - result.response.description == "ansible-description-auto-{{random_name}}"
      - result.response.replication_locations[0] == replication_location_1_expected
        or result.response.replication_locations[0] == replication_location_2_expected
      - result.response.replication_locations[1] == replication_location_1_expected
        or result.response.replication_locations[1] == replication_location_2_expected
      - result.response.replication_locations[0] != result.response.replication_locations[1]
      - result.response.replication_configurations[0] == replication_configuration_auto_1
        or result.response.replication_configurations[0] == replication_configuration_auto_2
      - result.response.replication_configurations[1] == replication_configuration_auto_1
        or result.response.replication_configurations[1] == replication_configuration_auto_2
      - result.response.replication_configurations[0] != result.response.replication_configurations[1]
      - result.response.category_ids[0] == "{{category_ext_id_2}}"
    success_msg: "Protection policy created successfully"
    fail_msg: "Protection policy creation failed"

- name: Add retention policy external ID to todelete list
  ansible.builtin.set_fact:
    todelete: "{{ todelete + [result.response.ext_id] }}"

########################################################################################

- name: Create Synchronous replication protection policy
  nutanix.ncp.ntnx_protection_policies_v2:
    name: "ansible-name-sync-{{random_name}}"
    description: "ansible-description-sync-{{random_name}}"
    replication_locations:
      - "{{ replication_location_1 }}"
      - "{{ replication_location_2 }}"
    replication_configurations:
      - source_location_label: "{{ replication_configuration_sync_1.source_location_label }}"
        remote_location_label: "{{ replication_configuration_sync_1.remote_location_label }}"
        schedule:
          recovery_point_type: "CRASH_CONSISTENT"
          recovery_point_objective_time_seconds: "{{ replication_configuration_sync_1.schedule.recovery_point_objective_time_seconds | int }}"
          start_time: "{{ replication_configuration_sync_1.schedule.start_time }}"
          sync_replication_auto_suspend_timeout_seconds: "{{ replication_configuration_sync_1.schedule.sync_replication_auto_suspend_timeout_seconds }}"
      - source_location_label: "{{ replication_configuration_sync_2.source_location_label }}"
        remote_location_label: "{{ replication_configuration_sync_2.remote_location_label }}"
        schedule:
          recovery_point_type: "CRASH_CONSISTENT"
          recovery_point_objective_time_seconds: "{{ replication_configuration_sync_2.schedule.recovery_point_objective_time_seconds | int }}"
          start_time: "{{ replication_configuration_sync_2.schedule.start_time }}"
          sync_replication_auto_suspend_timeout_seconds: "{{ replication_configuration_sync_2.schedule.sync_replication_auto_suspend_timeout_seconds }}"
    category_ids:
      - "{{category_ext_id_3}}"
  register: result
  ignore_errors: true

- name: Status for creating Synchronous replication protection policy
  ansible.builtin.assert:
    that:
      - result.changed == true
      - result.failed == false
      - result.response is defined
      - result.response.ext_id == result.protection_policy_ext_id
      - result.response.name == "ansible-name-sync-{{random_name}}"
      - result.response.description == "ansible-description-sync-{{random_name}}"
      - result.response.replication_locations[0] == replication_location_1_expected
        or result.response.replication_locations[0] == replication_location_2_expected
      - result.response.replication_locations[1] == replication_location_1_expected
        or result.response.replication_locations[1] == replication_location_2_expected
      - result.response.replication_locations[0] != result.response.replication_locations[1]
      - result.response.replication_configurations[0] == replication_configuration_sync_1
        or result.response.replication_configurations[0] == replication_configuration_sync_2
      - result.response.replication_configurations[1] == replication_configuration_sync_1
        or result.response.replication_configurations[1] == replication_configuration_sync_2
      - result.response.replication_configurations[0] != result.response.replication_configurations[1]
      - result.response.category_ids[0] == "{{category_ext_id_3}}"
    success_msg: "Protection policy created successfully"
    fail_msg: "Protection policy creation failed"

- name: Add retention policy external ID to todelete list
  ansible.builtin.set_fact:
    todelete: "{{ todelete + [result.response.ext_id] }}"

########################################################################################

- name: Create a Protected VM to be promoted
  ntnx_vms_v2:
    name: "{{ random_name }}_ansible_protected_vm_promote"
    description: "Protected VM for promotion"
    cluster:
      ext_id: "{{ cluster.uuid }}"
    categories:
      - ext_id: "{{ category_ext_id_3 }}"
  register: result
  ignore_errors: true

- name: Status for creating a Protected VM to be promoted
  ansible.builtin.assert:
    that:
      - result.changed == true
      - result.failed == false
      - result.response is defined
      - result.response.name == "{{ random_name }}_ansible_protected_vm_promote"
      - result.response.description == "Protected VM for promotion"
      - result.response.cluster.ext_id == cluster.uuid
      - result.response.categories[0].ext_id == "{{ category_ext_id_3 }}"
    success_msg: "Protected VM created successfully"
    fail_msg: "Protected VM creation failed"

- name: Set VM external ID
  ansible.builtin.set_fact:
    vm_ext_id_1: "{{ result.response.ext_id }}"

- name: Create a Protected VM to be restored
  ntnx_vms_v2:
    name: "{{ random_name }}_ansible_protected_vm_restore"
    description: "Protected VM for restore"
    cluster:
      ext_id: "{{ cluster.uuid }}"
    categories:
      - ext_id: "{{ category_ext_id_2 }}"
  register: result
  ignore_errors: true

- name: Status for creating a Protected VM to be restored
  ansible.builtin.assert:
    that:
      - result.changed == true
      - result.failed == false
      - result.response is defined
      - result.response.name == "{{ random_name }}_ansible_protected_vm_restore"
      - result.response.description == "Protected VM for restore"
      - result.response.cluster.ext_id == cluster.uuid
      - result.response.categories[0].ext_id == "{{ category_ext_id_2 }}"
    success_msg: "Protected VM created successfully"
    fail_msg: "Protected VM creation failed"

- name: Set VM external ID
  ansible.builtin.set_fact:
    vm_ext_id_2: "{{ result.response.ext_id }}"

- name: Create Volume group to be promoted
  nutanix.ncp.ntnx_volume_groups_v2:
    name: "{{ random_name }}_protected_vg_promote"
    description: "Volume group for promotion"
    cluster_reference: "{{ cluster.uuid }}"
  register: result
  ignore_errors: true

- name: Status for creating Volume group to be promoted
  ansible.builtin.assert:
    that:
      - result.error == None
      - result.ext_id is defined
      - result.task_ext_id is defined
      - result.response is defined
      - result.changed == true
      - result.ext_id == result.response.ext_id
      - result.response.cluster_reference == "{{cluster.uuid}}"
      - result.response.name == "{{ random_name }}_protected_vg_promote"
      - result.response.description == "Volume group for promotion"
    fail_msg: "Unable to create VG"
    success_msg: "VG created successfully"

- name: Set VG UUID
  ansible.builtin.set_fact:
    vg1_uuid: "{{ result.ext_id }}"

- name: Create Volume group to be restored
  nutanix.ncp.ntnx_volume_groups_v2:
    name: "{{ random_name }}_protected_vg_restore"
    description: "Volume group for restore"
    cluster_reference: "{{ cluster.uuid }}"
  register: result
  ignore_errors: true

- name: Status for creating Volume group to be restored
  ansible.builtin.assert:
    that:
      - result.error == None
      - result.ext_id is defined
      - result.task_ext_id is defined
      - result.response is defined
      - result.changed == true
      - result.ext_id == result.response.ext_id
      - result.response.cluster_reference == "{{cluster.uuid}}"
      - result.response.name == "{{ random_name }}_protected_vg_restore"
      - result.response.description == "Volume group for restore"
    fail_msg: "Unable to create VG"
    success_msg: "VG created successfully"

- name: Set VG UUID
  ansible.builtin.set_fact:
    vg2_uuid: "{{ result.ext_id }}"

- name: Associate category with first VG
  ntnx_volume_groups_categories_v2:
    ext_id: "{{ vg1_uuid }}"
    categories:
      - ext_id: "{{ category_ext_id_1 }}"
        entity_type: "CATEGORY"
  register: result
  ignore_errors: true

- name: Status for associating category with first VG
  ansible.builtin.assert:
    that:
      - result.changed == true
      - result.failed == false
      - result.response is defined
      - result.response.status == "SUCCEEDED"
    success_msg: "Category associated with VG successfully"
    fail_msg: "Category association with VG failed"

- name: Associate category with second VG
  ntnx_volume_groups_categories_v2:
    ext_id: "{{ vg2_uuid }}"
    categories:
      - ext_id: "{{ category_ext_id_2 }}"
        entity_type: "CATEGORY"
  register: result
  ignore_errors: true

- name: Status for associating category with second VG
  ansible.builtin.assert:
    that:
      - result.changed == true
      - result.failed == false
      - result.response is defined
      - result.response.status == "SUCCEEDED"
    success_msg: "Category associated with VG successfully"
    fail_msg: "Category association with VG failed"

# Wait for the first VM to be protected
- name: Fetch VM using ext_id
  ntnx_vms_info_v2:
    ext_id: "{{ vm_ext_id_1 }}"
  register: result
  until: result.response.protection_type == "RULE_PROTECTED"
  retries: 60
  delay: 10
  ignore_errors: true

- name: Status for fetching VM using ext_id
  ansible.builtin.assert:
    that:
      - result.changed == false
      - result.failed == false
      - result.response is defined
      - result.response.ext_id == vm_ext_id_1
      - result.response.name == "{{ random_name }}_ansible_protected_vm_promote"
      - result.response.description == "Protected VM for promotion"
      - result.response.cluster.ext_id == cluster.uuid
      - result.response.categories[0].ext_id == "{{ category_ext_id_3 }}"
      - result.response.protection_type == "RULE_PROTECTED"
    success_msg: "VM fetched successfully"
    fail_msg: "VM fetch failed"

# Wait for the second VM to be protected
- name: Fetch VM using ext_id
  ntnx_vms_info_v2:
    ext_id: "{{ vm_ext_id_2 }}"
  register: result
  until: result.response.protection_type == "RULE_PROTECTED"
  retries: 60
  delay: 10
  ignore_errors: true

- name: Status for fetching VM using ext_id
  ansible.builtin.assert:
    that:
      - result.changed == false
      - result.failed == false
      - result.response is defined
      - result.response.ext_id == vm_ext_id_2
      - result.response.name == "{{ random_name }}_ansible_protected_vm_restore"
      - result.response.description == "Protected VM for restore"
      - result.response.cluster.ext_id == cluster.uuid
      - result.response.categories[0].ext_id == "{{ category_ext_id_2 }}"
      - result.response.protection_type == "RULE_PROTECTED"
    success_msg: "VM fetched successfully"
    fail_msg: "VM fetch failed"

- name: Sleep for 5 minutes until VMs and VGs are protected
  ansible.builtin.pause:
    seconds: 300

- name: Get a protected resource
  nutanix.ncp.ntnx_protected_resources_info_v2:
    ext_id: "{{ vm_ext_id_1 }}"
  register: result
  ignore_errors: true

- name: Status for getting a protected resource
  ansible.builtin.assert:
    that:
      - result.changed == false
      - result.failed == false
      - result.response is defined
      - result.response.entity_ext_id == vm_ext_id_1
      - result.response.entity_type == "VM"
      - result.response.replication_states[0].replication_status == "IN_SYNC"
      - result.response.replication_states[0].target_site_reference.cluster_ext_id == cluster_availability_zone.uuid
      - result.response.source_site_reference.cluster_ext_id == cluster.uuid
      - result.response.site_protection_info[0].location_reference.cluster_ext_id == cluster.uuid
    success_msg: "Protected resource fetched successfully"
    fail_msg: "Protected resource fetch failed"

- name: Promote VM
  nutanix.ncp.ntnx_promote_protected_resources_v2:
    nutanix_host: "{{ availability_zone_pc_ip }}"
    ext_id: "{{ vm_ext_id_1 }}"
  register: result
  ignore_errors: true

- name: Status for promoting VM
  ansible.builtin.assert:
    that:
      - result.changed == true
      - result.failed == false
      - result.response is defined
      - result.response.status == "SUCCEEDED"
    success_msg: "VM promoted successfully"
    fail_msg: "VM promotion failed"

- name: Restore VM
  nutanix.ncp.ntnx_restore_protected_resources_v2:
    ext_id: "{{ vm_ext_id_2 }}"
    cluster_ext_id: "{{ cluster.uuid }}"
  register: result
  ignore_errors: true

- name: Status for restoring VM
  ansible.builtin.assert:
    that:
      - result.changed == true
      - result.failed == false
      - result.response is defined
      - result.response.status == "SUCCEEDED"
    success_msg: "VM restored successfully"
    fail_msg: "VM restore failed"

- name: Promote VG
  nutanix.ncp.ntnx_promote_protected_resources_v2:
    nutanix_host: "{{ availability_zone_pc_ip }}"
    ext_id: "{{ vg1_uuid }}"
  register: result
  ignore_errors: true

- name: Status for promoting VG
  ansible.builtin.assert:
    that:
      - result.changed == true
      - result.failed == false
      - result.response is defined
      - result.response.status == "SUCCEEDED"
    success_msg: "VG promoted successfully"
    fail_msg: "VG promotion failed"

- name: Restore VG
  nutanix.ncp.ntnx_restore_protected_resources_v2:
    ext_id: "{{ vg2_uuid }}"
    cluster_ext_id: "{{ cluster.uuid }}"
  register: result
  ignore_errors: true

- name: Status for restoring VG
  ansible.builtin.assert:
    that:
      - result.changed == true
      - result.failed == false
      - result.response is defined
      - result.response.status == "SUCCEEDED"
    success_msg: "VG restored successfully"
    fail_msg: "VG restore failed"

########################################################################################

- name: Generate spec for updating linear retention protection policy using check mode
  nutanix.ncp.ntnx_protection_policies_v2:
    ext_id: "{{ todelete[0] }}"
    name: "ansible-name-linear-{{random_name}}_updated"
    description: "ansible-description-linear-{{random_name}}_updated"
    replication_locations:
      - "{{ replication_location_1_updated }}"
      - "{{ replication_location_2_updated }}"
    replication_configurations:
      - source_location_label: "{{ replication_configuration_linear_1_updated.source_location_label }}"
        remote_location_label: "{{ replication_configuration_linear_1_updated.remote_location_label }}"
        schedule:
          recovery_point_type: "{{ replication_configuration_linear_1_updated.schedule.recovery_point_type }}"
          recovery_point_objective_time_seconds: "{{ replication_configuration_linear_1_updated.schedule.recovery_point_objective_time_seconds | int }}"
          retention:
            linear_retention:
              local: "{{ replication_configuration_linear_1_updated.schedule.retention.local }}"
              remote: "{{ replication_configuration_linear_1_updated.schedule.retention.remote }}"
          start_time: "{{ replication_configuration_linear_1_updated.schedule.start_time }}"
          sync_replication_auto_suspend_timeout_seconds:
            "{{ replication_configuration_linear_1_updated.schedule.
            sync_replication_auto_suspend_timeout_seconds }}"
      - source_location_label: "{{ replication_configuration_linear_2_updated.source_location_label }}"
        remote_location_label: "{{ replication_configuration_linear_2_updated.remote_location_label }}"
        schedule:
          recovery_point_type: "{{ replication_configuration_linear_2_updated.schedule.recovery_point_type }}"
          recovery_point_objective_time_seconds: "{{ replication_configuration_linear_2_updated.schedule.recovery_point_objective_time_seconds | int }}"
          retention:
            linear_retention:
              local: "{{ replication_configuration_linear_2_updated.schedule.retention.local }}"
              remote: "{{ replication_configuration_linear_2_updated.schedule.retention.remote }}"
          start_time: "{{ replication_configuration_linear_2_updated.schedule.start_time }}"
          sync_replication_auto_suspend_timeout_seconds:
            "{{ replication_configuration_linear_2_updated.schedule.
            sync_replication_auto_suspend_timeout_seconds }}"
    category_ids:
      - "{{category_ext_id_1}}"
  register: result
  ignore_errors: true
  check_mode: true

- name: Status for generating spec for updating linear retention protection policy using check mode
  ansible.builtin.assert:
    that:
      - result.changed == false
      - result.failed == false
      - result.response is defined
      - result.response.ext_id == "{{ todelete[0] }}"
      - result.response.name == "ansible-name-linear-{{random_name}}_updated"
      - result.response.description == "ansible-description-linear-{{random_name}}_updated"
      - result.response.replication_locations[0] == replication_location_1_updated_expected
        or result.response.replication_locations[0] == replication_location_2_updated_expected
      - result.response.replication_locations[1] == replication_location_1_updated_expected
        or result.response.replication_locations[1] == replication_location_2_updated_expected
      - result.response.replication_locations[0] != result.response.replication_locations[1]
      - result.response.replication_configurations[0] == replication_configuration_linear_1_updated
        or result.response.replication_configurations[0] == replication_configuration_linear_2_updated
      - result.response.replication_configurations[1] == replication_configuration_linear_1_updated
        or result.response.replication_configurations[1] == replication_configuration_linear_2_updated
      - result.response.replication_configurations[0] != result.response.replication_configurations[1]
      - result.response.category_ids[0] == "{{category_ext_id_1}}"
    success_msg: "Protection policy spec generated successfully"
    fail_msg: "Protection policy spec generation failed"

########################################################################################

- name: Update linear retention protection policy
  nutanix.ncp.ntnx_protection_policies_v2:
    ext_id: "{{ todelete[0] }}"
    name: "ansible-name-linear-{{random_name}}_updated"
    description: "ansible-description-linear-{{random_name}}_updated"
    replication_locations:
      - "{{ replication_location_1_updated }}"
      - "{{ replication_location_2_updated }}"
    replication_configurations:
      - source_location_label: "{{ replication_configuration_linear_1_updated.source_location_label }}"
        remote_location_label: "{{ replication_configuration_linear_1_updated.remote_location_label }}"
        schedule:
          recovery_point_type: "{{ replication_configuration_linear_1_updated.schedule.recovery_point_type }}"
          recovery_point_objective_time_seconds: "{{ replication_configuration_linear_1_updated.schedule.recovery_point_objective_time_seconds | int }}"
          retention:
            linear_retention:
              local: "{{ replication_configuration_linear_1_updated.schedule.retention.local }}"
              remote: "{{ replication_configuration_linear_1_updated.schedule.retention.remote }}"
          start_time: "{{ replication_configuration_linear_1_updated.schedule.start_time }}"
          sync_replication_auto_suspend_timeout_seconds:
            "{{ replication_configuration_linear_1_updated.schedule.
            sync_replication_auto_suspend_timeout_seconds }}"
      - source_location_label: "{{ replication_configuration_linear_2_updated.source_location_label }}"
        remote_location_label: "{{ replication_configuration_linear_2_updated.remote_location_label }}"
        schedule:
          recovery_point_type: "{{ replication_configuration_linear_2_updated.schedule.recovery_point_type }}"
          recovery_point_objective_time_seconds: "{{ replication_configuration_linear_2_updated.schedule.recovery_point_objective_time_seconds | int }}"
          retention:
            linear_retention:
              local: "{{ replication_configuration_linear_2_updated.schedule.retention.local }}"
              remote: "{{ replication_configuration_linear_2_updated.schedule.retention.remote }}"
          start_time: "{{ replication_configuration_linear_2_updated.schedule.start_time }}"
          sync_replication_auto_suspend_timeout_seconds:
            "{{ replication_configuration_linear_2_updated.schedule.
            sync_replication_auto_suspend_timeout_seconds }}"
    category_ids:
      - "{{category_ext_id_1}}"
  register: result
  ignore_errors: true

- name: Status for updating linear retention protection policy
  ansible.builtin.assert:
    that:
      - result.changed == true
      - result.failed == false
      - result.response is defined
      - result.response.ext_id == "{{ todelete[0] }}"
      - result.response.name == "ansible-name-linear-{{random_name}}_updated"
      - result.response.description == "ansible-description-linear-{{random_name}}_updated"
      - result.response.replication_locations[0] == replication_location_1_updated_expected
        or result.response.replication_locations[0] == replication_location_2_updated_expected
      - result.response.replication_locations[1] == replication_location_1_updated_expected
        or result.response.replication_locations[1] == replication_location_2_updated_expected
      - result.response.replication_locations[0] != result.response.replication_locations[1]
      - result.response.replication_configurations[0] == replication_configuration_linear_1_updated
        or result.response.replication_configurations[0] == replication_configuration_linear_2_updated
      - result.response.replication_configurations[1] == replication_configuration_linear_1_updated
        or result.response.replication_configurations[1] == replication_configuration_linear_2_updated
      - result.response.replication_configurations[0] != result.response.replication_configurations[1]
      - result.response.category_ids[0] == "{{category_ext_id_1}}"
    success_msg: "Protection policy updated successfully"
    fail_msg: "Protection policy update failed"

########################################################################################

- name: Test idempotency by updating protection policy with same attributes
  nutanix.ncp.ntnx_protection_policies_v2:
    ext_id: "{{ todelete[0] }}"
    name: "ansible-name-linear-{{random_name}}_updated"
    description: "ansible-description-linear-{{random_name}}_updated"
    replication_locations:
      - "{{ replication_location_1_updated }}"
      - "{{ replication_location_2_updated }}"
    replication_configurations:
      - source_location_label: "{{ replication_configuration_linear_1_updated.source_location_label }}"
        remote_location_label: "{{ replication_configuration_linear_1_updated.remote_location_label }}"
        schedule:
          recovery_point_type: "{{ replication_configuration_linear_1_updated.schedule.recovery_point_type }}"
          recovery_point_objective_time_seconds: "{{ replication_configuration_linear_1_updated.schedule.recovery_point_objective_time_seconds | int }}"
          retention:
            linear_retention:
              local: "{{ replication_configuration_linear_1_updated.schedule.retention.local }}"
              remote: "{{ replication_configuration_linear_1_updated.schedule.retention.remote }}"
          start_time: "{{ replication_configuration_linear_1_updated.schedule.start_time }}"
          sync_replication_auto_suspend_timeout_seconds:
            "{{ replication_configuration_linear_1_updated.schedule.
            sync_replication_auto_suspend_timeout_seconds }}"
      - source_location_label: "{{ replication_configuration_linear_2_updated.source_location_label }}"
        remote_location_label: "{{ replication_configuration_linear_2_updated.remote_location_label }}"
        schedule:
          recovery_point_type: "{{ replication_configuration_linear_2_updated.schedule.recovery_point_type }}"
          recovery_point_objective_time_seconds: "{{ replication_configuration_linear_2_updated.schedule.recovery_point_objective_time_seconds | int }}"
          retention:
            linear_retention:
              local: "{{ replication_configuration_linear_2_updated.schedule.retention.local }}"
              remote: "{{ replication_configuration_linear_2_updated.schedule.retention.remote }}"
          start_time: "{{ replication_configuration_linear_2_updated.schedule.start_time }}"
          sync_replication_auto_suspend_timeout_seconds:
            "{{ replication_configuration_linear_2_updated.schedule.
            sync_replication_auto_suspend_timeout_seconds }}"
    category_ids:
      - "{{category_ext_id_1}}"
  register: result
  ignore_errors: true

- name: Status for idempotency test
  ansible.builtin.assert:
    that:
      - result.changed == false
      - result.failed == false
      - result.msg == "Nothing to change."
    success_msg: "Protection policy updated successfully"
    fail_msg: "Protection policy update failed"

########################################################################################

- name: Update auto retention protection policy
  nutanix.ncp.ntnx_protection_policies_v2:
    ext_id: "{{ todelete[1] }}"
    name: "ansible-name-auto-{{random_name}}_updated"
    description: "ansible-description-auto-{{random_name}}_updated"
    replication_locations:
      - "{{ replication_location_1_updated }}"
      - "{{ replication_location_2_updated }}"
    replication_configurations:
      - source_location_label: "{{ replication_configuration_auto_1_updated.source_location_label }}"
        remote_location_label: "{{ replication_configuration_auto_1_updated.remote_location_label }}"
        schedule:
          recovery_point_type: "{{ replication_configuration_auto_1_updated.schedule.recovery_point_type }}"
          recovery_point_objective_time_seconds: "{{ replication_configuration_auto_1_updated.schedule.recovery_point_objective_time_seconds | int }}"
          retention:
            auto_rollup_retention:
              local:
                snapshot_interval_type: "{{ replication_configuration_auto_1_updated.schedule.retention.local.snapshot_interval_type }}"
                frequency: "{{ replication_configuration_auto_1_updated.schedule.retention.local.frequency }}"
              remote:
                snapshot_interval_type: "{{ replication_configuration_auto_1_updated.schedule.retention.remote.snapshot_interval_type }}"
                frequency: "{{ replication_configuration_auto_1_updated.schedule.retention.remote.frequency }}"
          start_time: "{{ replication_configuration_auto_1_updated.schedule.start_time }}"
          sync_replication_auto_suspend_timeout_seconds: "{{ replication_configuration_auto_1_updated.schedule.sync_replication_auto_suspend_timeout_seconds }}"
      - source_location_label: "{{ replication_configuration_auto_2_updated.source_location_label }}"
        remote_location_label: "{{ replication_configuration_auto_2_updated.remote_location_label }}"
        schedule:
          recovery_point_type: "{{ replication_configuration_auto_2_updated.schedule.recovery_point_type }}"
          recovery_point_objective_time_seconds: "{{ replication_configuration_auto_2_updated.schedule.recovery_point_objective_time_seconds | int }}"
          retention:
            auto_rollup_retention:
              local:
                snapshot_interval_type: "{{ replication_configuration_auto_2_updated.schedule.retention.local.snapshot_interval_type }}"
                frequency: "{{ replication_configuration_auto_2_updated.schedule.retention.local.frequency }}"
              remote:
                snapshot_interval_type: "{{ replication_configuration_auto_2_updated.schedule.retention.remote.snapshot_interval_type }}"
                frequency: "{{ replication_configuration_auto_2_updated.schedule.retention.remote.frequency }}"
          start_time: "{{ replication_configuration_auto_2_updated.schedule.start_time }}"
          sync_replication_auto_suspend_timeout_seconds: "{{ replication_configuration_auto_2_updated.schedule.sync_replication_auto_suspend_timeout_seconds }}"
    category_ids:
      - "{{category_ext_id_2}}"
  register: result
  ignore_errors: true

- name: Status for updating auto retention protection policy
  ansible.builtin.assert:
    that:
      - result.changed == true
      - result.failed == false
      - result.response is defined
      - result.response.ext_id == "{{ todelete[1] }}"
      - result.response.name == "ansible-name-auto-{{random_name}}_updated"
      - result.response.description == "ansible-description-auto-{{random_name}}_updated"
      - result.response.replication_locations[0] == replication_location_1_updated_expected
        or result.response.replication_locations[0] == replication_location_2_updated_expected
      - result.response.replication_locations[1] == replication_location_1_updated_expected
        or result.response.replication_locations[1] == replication_location_2_updated_expected
      - result.response.replication_locations[0] != result.response.replication_locations[1]
      - result.response.replication_configurations[0] == replication_configuration_auto_1_updated
        or result.response.replication_configurations[0] == replication_configuration_auto_2_updated
      - result.response.replication_configurations[1] == replication_configuration_auto_1_updated
        or result.response.replication_configurations[1] == replication_configuration_auto_2_updated
      - result.response.replication_configurations[0] != result.response.replication_configurations[1]
      - result.response.category_ids[0] == "{{category_ext_id_2}}"
    success_msg: "Protection policy updated successfully"
    fail_msg: "Protection policy update failed"

########################################################################################

- name: List all protection policies
  nutanix.ncp.ntnx_protection_policies_info_v2:
  register: result
  ignore_errors: true

- name: Status for listing all protection policies
  ansible.builtin.assert:
    that:
      - result.changed == False
      - result.failed == False
      - result.response is defined
      - result.response | length >= 2
    fail_msg: "Unable to list protection policies"
    success_msg: "Protection policies listed successfully"

########################################################################################

- name: List all protection policies with filter
  nutanix.ncp.ntnx_protection_policies_info_v2:
    filter: "name eq 'ansible-name-auto-{{random_name}}_updated'"
  register: result
  ignore_errors: true

- name: Status for listing all protection policies with filter
  ansible.builtin.assert:
    that:
      - result.changed == False
      - result.failed == False
      - result.response is defined
      - result.response | length == 1
      - result.response[0].name == "ansible-name-auto-{{random_name}}_updated"
    fail_msg: "Unable to list protection policies with filter"
    success_msg: "Protection policies listed successfully"

########################################################################################

- name: List all protection policies with limit
  nutanix.ncp.ntnx_protection_policies_info_v2:
    limit: 1
  register: result
  ignore_errors: true

- name: Status for listing all protection policies with limit
  ansible.builtin.assert:
    that:
      - result.changed == False
      - result.failed == False
      - result.response is defined
      - result.response | length == 1
    fail_msg: "Unable to list protection policies with limit"
    success_msg: "Protection policies listed successfully"

########################################################################################

- name: Fetch protection policy by external ID
  nutanix.ncp.ntnx_protection_policies_info_v2:
    ext_id: "{{ todelete[0] }}"
  register: result
  ignore_errors: true

- name: Status for fetching protection policy by external ID
  ansible.builtin.assert:
    that:
      - result.changed == false
      - result.failed == false
      - result.response is defined
      - result.response.ext_id == "{{ todelete[0] }}"
      - result.response.name == "ansible-name-linear-{{random_name}}_updated"
      - result.response.description == "ansible-description-linear-{{random_name}}_updated"
      - result.response.replication_locations[0] == replication_location_1_updated_expected
        or result.response.replication_locations[0] == replication_location_2_updated_expected
      - result.response.replication_locations[1] == replication_location_1_updated_expected
        or result.response.replication_locations[1] == replication_location_2_updated_expected
      - result.response.replication_locations[0] != result.response.replication_locations[1]
      - result.response.replication_configurations[0] == replication_configuration_linear_1_updated
        or result.response.replication_configurations[0] == replication_configuration_linear_2_updated
      - result.response.replication_configurations[1] == replication_configuration_linear_1_updated
        or result.response.replication_configurations[1] == replication_configuration_linear_2_updated
      - result.response.replication_configurations[0] != result.response.replication_configurations[1]
      - result.response.category_ids[0] == "{{category_ext_id_1}}"
    success_msg: "Protection policy fetched successfully"
    fail_msg: "Protection policy fetch failed"

########################################################################################

- name: Fetch all VGs on local cluster
  ntnx_volume_groups_info_v2:
  register: result
  ignore_errors: true

- name: Filter only protected VGs
  set_fact:
    protected_vgs: "{{ result.response | selectattr('name', 'search', 'protected_vg_') | list }}"

- name: Extract external ids of protected VGs
  set_fact:
    protected_vgs_ext_ids: "{{ protected_vgs | map(attribute='ext_id') | list }}"

- name: Delete all Created VGs on local cluster
  nutanix.ncp.ntnx_volume_groups_v2:
    state: absent
    ext_id: "{{ item }}"
  register: result
  loop: "{{ protected_vgs_ext_ids }}"

- name: Deletion Status
  ansible.builtin.assert:
    that:
      - item.changed == true
      - item.failed == false
      - item.response.status == 'SUCCEEDED'
      - item.response is defined
      - item.changed == True
      - item.failed == False
      - item.ext_id == "{{ protected_vgs_ext_ids[vgs_index] }}"
    fail_msg: "Unable to delete VG "
    success_msg: "VG is deleted successfully "
  loop: "{{ result.results }}"
  loop_control:
    index_var: vgs_index

- name: Fetch all VGs on remote cluster
  ntnx_volume_groups_info_v2:
    nutanix_host: "{{ availability_zone_pc_ip }}"
  register: result
  ignore_errors: true

- name: Filter only protected VGs
  set_fact:
    protected_vgs: "{{ result.response | selectattr('name', 'search', 'protected_vg_') | list }}"

- name: Extract external ids of protected VGs
  set_fact:
    protected_vgs_ext_ids: "{{ protected_vgs | map(attribute='ext_id') | list }}"

- name: Delete all Created VGs on remote cluster
  nutanix.ncp.ntnx_volume_groups_v2:
    nutanix_host: "{{ availability_zone_pc_ip }}"
    state: absent
    ext_id: "{{ item }}"
  register: result
  loop: "{{ protected_vgs_ext_ids }}"

- name: Deletion Status
  ansible.builtin.assert:
    that:
      - item.changed == true
      - item.failed == false
      - item.response.status == 'SUCCEEDED'
      - item.response is defined
      - item.changed == True
      - item.failed == False
      - item.ext_id == "{{ protected_vgs_ext_ids[vgs_index] }}"
    fail_msg: "Unable to delete VG "
    success_msg: "VG is deleted successfully "
  loop: "{{ result.results }}"
  loop_control:
    index_var: vgs_index

########################################################################################

- name: Fetch all VMs on local cluster
  ntnx_vms_info_v2:
  register: result
  ignore_errors: true

- name: Filter only protected VMs
  set_fact:
    protected_vms: "{{ result.response | selectattr('name', 'search', random_name ~ '_ansible_protected_vm') | list }}"

- name: Extract external ids of protected VMs
  set_fact:
    protected_vms_ext_ids: "{{ protected_vms | map(attribute='ext_id') | list }}"

- name: Delete all Created VMs on local cluster
  ntnx_vms_v2:
    state: absent
    ext_id: "{{ item }}"
  register: result
  loop: "{{ protected_vms_ext_ids }}"

- name: Deletion Status
  ansible.builtin.assert:
    that:
      - item.changed == true
      - item.failed == false
      - item.response.status == 'SUCCEEDED'
      - item.response is defined
      - item.changed == True
      - item.failed == False
      - item.ext_id == "{{ protected_vms_ext_ids[vms_index] }}"
    fail_msg: "Unable to delete VM "
    success_msg: "VM is deleted successfully "
  loop: "{{ result.results }}"
  loop_control:
    index_var: vms_index

- name: Fetch all VMs on remote cluster
  ntnx_vms_info_v2:
    nutanix_host: "{{ availability_zone_pc_ip }}"
  register: result
  ignore_errors: true

- name: Filter only protected VMs
  set_fact:
    protected_vms: "{{ result.response | selectattr('name', 'search', random_name ~ '_ansible_protected_vm') | list }}"

- name: Extract external ids of protected VMs
  set_fact:
    protected_vms_ext_ids: "{{ protected_vms | map(attribute='ext_id') | list }}"

- name: Delete all Created VMs on remote cluster
  ntnx_vms_v2:
    nutanix_host: "{{ availability_zone_pc_ip }}"
    state: absent
    ext_id: "{{ item }}"
  register: result
  loop: "{{ protected_vms_ext_ids }}"
  ignore_errors: true

- name: Deletion Status
  ansible.builtin.assert:
    that:
      - item.changed == true
      - item.failed == false
      - item.response.status == 'SUCCEEDED'
      - item.response is defined
      - item.changed == True
      - item.failed == False
      - item.ext_id == "{{ protected_vms_ext_ids[vms_index] }}"
    fail_msg: "Unable to delete VM "
    success_msg: "VM is deleted successfully "
  loop: "{{ result.results }}"
  loop_control:
    index_var: vms_index

########################################################################################

- name: Delete all protection policies
  nutanix.ncp.ntnx_protection_policies_v2:
    ext_id: "{{ item }}"
    state: absent
  loop: "{{ todelete }}"
  register: result
  ignore_errors: true

- name: Status for deleting all protection policies
  ansible.builtin.assert:
    that:
      - item.changed == true
      - item.failed == false
      - item.response is defined
      - item.ext_id in todelete
      - item.response.status == "SUCCEEDED"
      - result.results | length == todelete | length
    fail_msg: "Unable to delete protection policies"
    success_msg: "Protection policies deleted successfully"
  loop: "{{ result.results }}"

########################################################################################

- name: Delete Created categories
  ntnx_categories_v2:
    ext_id: "{{item}}"
    state: absent
  register: result
  loop: "{{ todelete_categories }}"
  ignore_errors: true

- name: Deletion Status
  ansible.builtin.assert:
    that:
      - result.changed == True
      - result.results | length == todelete_categories | length
      - result.msg == "All items completed"
    fail_msg: "Unable to delete category key & value"
    success_msg: "Category key & value deleted successfully"
