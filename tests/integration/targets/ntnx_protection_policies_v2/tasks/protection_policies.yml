---
- name: Start Protection Policy related tests
  ansible.builtin.debug:
    msg: Start Protection Policy related tests

- name: Generate random names
  ansible.builtin.set_fact:
    random_name: "{{query('community.general.random_string',numbers=false, special=false,length=12)[0]}}"
    label1: "{{query('community.general.random_string',numbers=false, special=false,length=12)[0]}}"
    label2: "{{query('community.general.random_string',numbers=false, special=false,length=12)[0]}}"
    todelete: []

- name: List all categories and get category id
  ntnx_categories_info_v2:
  register: result
  ignore_errors: true

- name: Status of all categories
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.changed == False
      - result.failed == False
      - result.response | length > 0
    fail_msg: "Unable to list categories "
    success_msg: "categories  listed successfully"

- name: Set categories external ids
  ansible.builtin.set_fact:
    category_ext_id_1: "{{ result.response[0].ext_id }}"
    category_ext_id_2: "{{ result.response[1].ext_id }}"
    category_ext_id_3: "{{ result.response[2].ext_id }}"

- name: List all clusters to get prism central external ID
  ntnx_clusters_info_v2:
    filter: "config/clusterFunction/any(t:t eq Clustermgmt.Config.ClusterFunctionRef'PRISM_CENTRAL')"
  register: result
  ignore_errors: true

- name: Get prism central external ID
  ansible.builtin.set_fact:
    domain_manager_ext_id: "{{ result.response[0].ext_id }}"

########################################################################################

- name: Generate spec for creating protection policy using check mode
  nutanix.ncp.ntnx_protection_policies_v2:
    name: "ansible-name-test-{{random_name}}"
    description: "ansible-description-test-{{random_name}}"
    replication_locations:
      - "{{ replication_location_1}}"
      - "{{ replication_location_2}}"
    replication_configurations:
      - source_location_label: "{{ replication_configuration_linear_1.source_location_label }}"
        remote_location_label: "{{ replication_configuration_linear_1.remote_location_label }}"
        schedule:
          recovery_point_type: "{{ replication_configuration_linear_1.schedule.recovery_point_type }}"
          recovery_point_objective_time_seconds: "{{ replication_configuration_linear_1.schedule.recovery_point_objective_time_seconds | int }}"
          retention:
            linear_retention:
              local: "{{ replication_configuration_linear_1.schedule.retention.local }}"
              remote: "{{ replication_configuration_linear_1.schedule.retention.remote }}"
          start_time: "{{ replication_configuration_linear_1.schedule.start_time }}"
          sync_replication_auto_suspend_timeout_seconds: "{{ replication_configuration_linear_1.schedule.sync_replication_auto_suspend_timeout_seconds }}"
      - source_location_label: "{{  replication_configuration_linear_2.source_location_label }}"
        remote_location_label: "{{ replication_configuration_linear_2.remote_location_label }}"
        schedule:
          recovery_point_type: "{{ replication_configuration_linear_2.schedule.recovery_point_type }}"
          recovery_point_objective_time_seconds: "{{ replication_configuration_linear_2.schedule.recovery_point_objective_time_seconds | int }}"
          retention:
            linear_retention:
              local: "{{ replication_configuration_linear_2.schedule.retention.local }}"
              remote: "{{ replication_configuration_linear_2.schedule.retention.remote }}"
          start_time: "{{ replication_configuration_linear_2.schedule.start_time }}"
          sync_replication_auto_suspend_timeout_seconds: "{{ replication_configuration_linear_2.schedule.sync_replication_auto_suspend_timeout_seconds }}"
    category_ids:
      - "00000000-0000-0000-0000-000000000000"
  register: result
  ignore_errors: true
  check_mode: true

- name: Status for generating spec for creating protection policy using check mode
  ansible.builtin.assert:
    that:
      - result.changed == false
      - result.failed == false
      - result.response is defined
      - result.response.name == "ansible-name-test-{{random_name}}"
      - result.response.description == "ansible-description-test-{{random_name}}"
      - result.response.replication_locations[0] == replication_location_1
        or result.response.replication_locations[0] == replication_location_2
      - result.response.replication_locations[1] == replication_location_1
        or result.response.replication_locations[1] == replication_location_2
      - result.response.replication_configurations[0] == replication_configuration_linear_1
        or result.response.replication_configurations[0] == replication_configuration_linear_2
      - result.response.replication_configurations[1] == replication_configuration_linear_1
        or result.response.replication_configurations[1] == replication_configuration_linear_2
      - result.response.replication_locations[0] != result.response.replication_locations[1]
      - result.response.replication_configurations[0] != result.response.replication_configurations[1]
      - result.response.category_ids[0] == "00000000-0000-0000-0000-000000000000"
    success_msg: "Protection policy spec generated successfully"
    fail_msg: "Protection policy spec generation failed"

########################################################################################

- name: Create linear retention protection policy
  nutanix.ncp.ntnx_protection_policies_v2:
    name: "ansible-name-linear-{{random_name}}"
    description: "ansible-description-linear-{{random_name}}"
    replication_locations:
      - "{{ replication_location_1 }}"
      - "{{ replication_location_2 }}"
    replication_configurations:
      - source_location_label: "{{ replication_configuration_linear_1.source_location_label }}"
        remote_location_label: "{{ replication_configuration_linear_1.remote_location_label }}"
        schedule:
          recovery_point_type: "{{ replication_configuration_linear_1.schedule.recovery_point_type }}"
          recovery_point_objective_time_seconds: "{{ replication_configuration_linear_1.schedule.recovery_point_objective_time_seconds | int }}"
          retention:
            linear_retention:
              local: "{{ replication_configuration_linear_1.schedule.retention.local }}"
              remote: "{{ replication_configuration_linear_1.schedule.retention.remote }}"
          start_time: "{{ replication_configuration_linear_1.schedule.start_time }}"
          sync_replication_auto_suspend_timeout_seconds: "{{ replication_configuration_linear_1.schedule.sync_replication_auto_suspend_timeout_seconds }}"
      - source_location_label: "{{ replication_configuration_linear_2.source_location_label }}"
        remote_location_label: "{{ replication_configuration_linear_2.remote_location_label }}"
        schedule:
          recovery_point_type: "{{ replication_configuration_linear_2.schedule.recovery_point_type }}"
          recovery_point_objective_time_seconds: "{{ replication_configuration_linear_2.schedule.recovery_point_objective_time_seconds | int }}"
          retention:
            linear_retention:
              local: "{{ replication_configuration_linear_2.schedule.retention.local }}"
              remote: "{{ replication_configuration_linear_2.schedule.retention.remote }}"
          start_time: "{{ replication_configuration_linear_2.schedule.start_time }}"
          sync_replication_auto_suspend_timeout_seconds: "{{ replication_configuration_linear_2.schedule.sync_replication_auto_suspend_timeout_seconds }}"
    category_ids:
      - "{{category_ext_id_1}}"
  register: result
  ignore_errors: true

- name: Status for creating linear retention protection policy
  ansible.builtin.assert:
    that:
      - result.changed == true
      - result.failed == false
      - result.response is defined
      - result.response.ext_id == result.protection_policy_ext_id
      - result.response.name == "ansible-name-linear-{{random_name}}"
      - result.response.description == "ansible-description-linear-{{random_name}}"
      - result.response.replication_locations[0] == replication_location_1
        or result.response.replication_locations[0] == replication_location_2
      - result.response.replication_locations[1] == replication_location_1
        or result.response.replication_locations[1] == replication_location_2
      - result.response.replication_locations[0] != result.response.replication_locations[1]
      - result.response.replication_configurations[0] == replication_configuration_linear_1
        or result.response.replication_configurations[0] == replication_configuration_linear_2
      - result.response.replication_configurations[1] == replication_configuration_linear_1
        or result.response.replication_configurations[1] == replication_configuration_linear_2
      - result.response.replication_configurations[0] != result.response.replication_configurations[1]
      - result.response.category_ids[0] == "{{category_ext_id_1}}"
    success_msg: "Protection policy created successfully"
    fail_msg: "Protection policy creation failed"

- name: Add retention policy external ID to todelete list
  ansible.builtin.set_fact:
    todelete: "{{ todelete + [result.response.ext_id] }}"

########################################################################################

- name: Create auto retention protection policy
  nutanix.ncp.ntnx_protection_policies_v2:
    name: "ansible-name-auto-{{random_name}}"
    description: "ansible-description-auto-{{random_name}}"
    replication_locations:
      - "{{ replication_location_1 }}"
      - "{{ replication_location_2 }}"
    replication_configurations:
      - source_location_label: "{{ replication_configuration_auto_1.source_location_label }}"
        remote_location_label: "{{ replication_configuration_auto_1.remote_location_label }}"
        schedule:
          recovery_point_type: "{{ replication_configuration_auto_1.schedule.recovery_point_type }}"
          recovery_point_objective_time_seconds: "{{ replication_configuration_auto_1.schedule.recovery_point_objective_time_seconds | int }}"
          retention:
            auto_rollup_retention:
              local:
                snapshot_interval_type: "{{ replication_configuration_auto_1.schedule.retention.local.snapshot_interval_type }}"
                frequency: "{{ replication_configuration_auto_1.schedule.retention.local.frequency }}"
              remote:
                snapshot_interval_type: "{{ replication_configuration_auto_1.schedule.retention.remote.snapshot_interval_type }}"
                frequency: "{{ replication_configuration_auto_1.schedule.retention.remote.frequency }}"
          start_time: "{{ replication_configuration_auto_1.schedule.start_time }}"
          sync_replication_auto_suspend_timeout_seconds: "{{ replication_configuration_auto_1.schedule.sync_replication_auto_suspend_timeout_seconds }}"
      - source_location_label: "{{ replication_configuration_auto_2.source_location_label }}"
        remote_location_label: "{{ replication_configuration_auto_2.remote_location_label }}"
        schedule:
          recovery_point_type: "{{ replication_configuration_auto_2.schedule.recovery_point_type }}"
          recovery_point_objective_time_seconds: "{{ replication_configuration_auto_2.schedule.recovery_point_objective_time_seconds | int }}"
          retention:
            auto_rollup_retention:
              local:
                snapshot_interval_type: "{{ replication_configuration_auto_2.schedule.retention.local.snapshot_interval_type }}"
                frequency: "{{ replication_configuration_auto_2.schedule.retention.local.frequency }}"
              remote:
                snapshot_interval_type: "{{ replication_configuration_auto_2.schedule.retention.remote.snapshot_interval_type }}"
                frequency: "{{ replication_configuration_auto_2.schedule.retention.remote.frequency }}"
          start_time: "{{ replication_configuration_auto_2.schedule.start_time }}"
          sync_replication_auto_suspend_timeout_seconds: "{{ replication_configuration_auto_2.schedule.sync_replication_auto_suspend_timeout_seconds }}"
    category_ids:
      - "{{category_ext_id_2}}"
  register: result
  ignore_errors: true

- name: Status for creating auto retention protection policy
  ansible.builtin.assert:
    that:
      - result.changed == true
      - result.failed == false
      - result.response is defined
      - result.response.ext_id == result.protection_policy_ext_id
      - result.response.name == "ansible-name-auto-{{random_name}}"
      - result.response.description == "ansible-description-auto-{{random_name}}"
      - result.response.replication_locations[0] == replication_location_1
        or result.response.replication_locations[0] == replication_location_2
      - result.response.replication_locations[1] == replication_location_1
        or result.response.replication_locations[1] == replication_location_2
      - result.response.replication_locations[0] != result.response.replication_locations[1]
      - result.response.replication_configurations[0] == replication_configuration_auto_1
        or result.response.replication_configurations[0] == replication_configuration_auto_2
      - result.response.replication_configurations[1] == replication_configuration_auto_1
        or result.response.replication_configurations[1] == replication_configuration_auto_2
      - result.response.replication_configurations[0] != result.response.replication_configurations[1]
      - result.response.category_ids[0] == "{{category_ext_id_2}}"
    success_msg: "Protection policy created successfully"
    fail_msg: "Protection policy creation failed"

- name: Add retention policy external ID to todelete list
  ansible.builtin.set_fact:
    todelete: "{{ todelete + [result.response.ext_id] }}"

########################################################################################

- name: Create Synchronous replication protection policy
  nutanix.ncp.ntnx_protection_policies_v2:
    name: "ansible-name-sync-{{random_name}}"
    description: "ansible-description-sync-{{random_name}}"
    replication_locations:
      - "{{ replication_location_1 }}"
      - "{{ replication_location_2 }}"
    replication_configurations:
      - source_location_label: "{{ replication_configuration_sync_1.source_location_label }}"
        remote_location_label: "{{ replication_configuration_sync_1.remote_location_label }}"
        schedule:
          recovery_point_type: "CRASH_CONSISTENT"
          recovery_point_objective_time_seconds: "{{ replication_configuration_sync_1.schedule.recovery_point_objective_time_seconds | int }}"
          start_time: "{{ replication_configuration_sync_1.schedule.start_time }}"
          sync_replication_auto_suspend_timeout_seconds: "{{ replication_configuration_sync_1.schedule.sync_replication_auto_suspend_timeout_seconds }}"
      - source_location_label: "{{ replication_configuration_sync_2.source_location_label }}"
        remote_location_label: "{{ replication_configuration_sync_2.remote_location_label }}"
        schedule:
          recovery_point_type: "CRASH_CONSISTENT"
          recovery_point_objective_time_seconds: "{{ replication_configuration_sync_2.schedule.recovery_point_objective_time_seconds | int }}"
          start_time: "{{ replication_configuration_sync_2.schedule.start_time }}"
          sync_replication_auto_suspend_timeout_seconds: "{{ replication_configuration_sync_2.schedule.sync_replication_auto_suspend_timeout_seconds }}"
    category_ids:
      - "{{category_ext_id_3}}"
  register: result
  ignore_errors: true

- name: Status for creating Synchronous replication protection policy
  ansible.builtin.assert:
    that:
      - result.changed == true
      - result.failed == false
      - result.response is defined
      - result.response.ext_id == result.protection_policy_ext_id
      - result.response.name == "ansible-name-sync-{{random_name}}"
      - result.response.description == "ansible-description-sync-{{random_name}}"
      - result.response.replication_locations[0] == replication_location_1
        or result.response.replication_locations[0] == replication_location_2
      - result.response.replication_locations[1] == replication_location_1
        or result.response.replication_locations[1] == replication_location_2
      - result.response.replication_locations[0] != result.response.replication_locations[1]
      - result.response.replication_configurations[0] == replication_configuration_sync_1
        or result.response.replication_configurations[0] == replication_configuration_sync_2
      - result.response.replication_configurations[1] == replication_configuration_sync_1
        or result.response.replication_configurations[1] == replication_configuration_sync_2
      - result.response.replication_configurations[0] != result.response.replication_configurations[1]
      - result.response.category_ids[0] == "{{category_ext_id_3}}"
    success_msg: "Protection policy created successfully"
    fail_msg: "Protection policy creation failed"

- name: Add retention policy external ID to todelete list
  ansible.builtin.set_fact:
    todelete: "{{ todelete + [result.response.ext_id] }}"

########################################################################################

- name: Generate spec for updating linear retention protection policy using check mode
  nutanix.ncp.ntnx_protection_policies_v2:
    ext_id: "{{ todelete[0] }}"
    name: "ansible-name-linear-{{random_name}}_updated"
    description: "ansible-description-linear-{{random_name}}_updated"
    replication_locations:
      - "{{ replication_location_1_updated }}"
      - "{{ replication_location_2_updated }}"
    replication_configurations:
      - source_location_label: "{{ replication_configuration_linear_1_updated.source_location_label }}"
        remote_location_label: "{{ replication_configuration_linear_1_updated.remote_location_label }}"
        schedule:
          recovery_point_type: "{{ replication_configuration_linear_1_updated.schedule.recovery_point_type }}"
          recovery_point_objective_time_seconds: "{{ replication_configuration_linear_1_updated.schedule.recovery_point_objective_time_seconds | int }}"
          retention:
            linear_retention:
              local: "{{ replication_configuration_linear_1_updated.schedule.retention.local }}"
              remote: "{{ replication_configuration_linear_1_updated.schedule.retention.remote }}"
          start_time: "{{ replication_configuration_linear_1_updated.schedule.start_time }}"
          sync_replication_auto_suspend_timeout_seconds:
            "{{ replication_configuration_linear_1_updated.schedule.
            sync_replication_auto_suspend_timeout_seconds }}"
      - source_location_label: "{{ replication_configuration_linear_2_updated.source_location_label }}"
        remote_location_label: "{{ replication_configuration_linear_2_updated.remote_location_label }}"
        schedule:
          recovery_point_type: "{{ replication_configuration_linear_2_updated.schedule.recovery_point_type }}"
          recovery_point_objective_time_seconds: "{{ replication_configuration_linear_2_updated.schedule.recovery_point_objective_time_seconds | int }}"
          retention:
            linear_retention:
              local: "{{ replication_configuration_linear_2_updated.schedule.retention.local }}"
              remote: "{{ replication_configuration_linear_2_updated.schedule.retention.remote }}"
          start_time: "{{ replication_configuration_linear_2_updated.schedule.start_time }}"
          sync_replication_auto_suspend_timeout_seconds:
            "{{ replication_configuration_linear_2_updated.schedule.
            sync_replication_auto_suspend_timeout_seconds }}"
    category_ids:
      - "{{category_ext_id_1}}"
  register: result
  ignore_errors: true
  check_mode: true

- name: Status for generating spec for updating linear retention protection policy using check mode
  ansible.builtin.assert:
    that:
      - result.changed == false
      - result.failed == false
      - result.response is defined
      - result.response.ext_id == "{{ todelete[0] }}"
      - result.response.name == "ansible-name-linear-{{random_name}}_updated"
      - result.response.description == "ansible-description-linear-{{random_name}}_updated"
      - result.response.replication_locations[0] == replication_location_1_updated
        or result.response.replication_locations[0] == replication_location_2_updated
      - result.response.replication_locations[1] == replication_location_1_updated
        or result.response.replication_locations[1] == replication_location_2_updated
      - result.response.replication_locations[0] != result.response.replication_locations[1]
      - result.response.replication_configurations[0] == replication_configuration_linear_1_updated
        or result.response.replication_configurations[0] == replication_configuration_linear_2_updated
      - result.response.replication_configurations[1] == replication_configuration_linear_1_updated
        or result.response.replication_configurations[1] == replication_configuration_linear_2_updated
      - result.response.replication_configurations[0] != result.response.replication_configurations[1]
      - result.response.category_ids[0] == "{{category_ext_id_1}}"
    success_msg: "Protection policy spec generated successfully"
    fail_msg: "Protection policy spec generation failed"

########################################################################################

- name: Update linear retention protection policy
  nutanix.ncp.ntnx_protection_policies_v2:
    ext_id: "{{ todelete[0] }}"
    name: "ansible-name-linear-{{random_name}}_updated"
    description: "ansible-description-linear-{{random_name}}_updated"
    replication_locations:
      - "{{ replication_location_1_updated }}"
      - "{{ replication_location_2_updated }}"
    replication_configurations:
      - source_location_label: "{{ replication_configuration_linear_1_updated.source_location_label }}"
        remote_location_label: "{{ replication_configuration_linear_1_updated.remote_location_label }}"
        schedule:
          recovery_point_type: "{{ replication_configuration_linear_1_updated.schedule.recovery_point_type }}"
          recovery_point_objective_time_seconds: "{{ replication_configuration_linear_1_updated.schedule.recovery_point_objective_time_seconds | int }}"
          retention:
            linear_retention:
              local: "{{ replication_configuration_linear_1_updated.schedule.retention.local }}"
              remote: "{{ replication_configuration_linear_1_updated.schedule.retention.remote }}"
          start_time: "{{ replication_configuration_linear_1_updated.schedule.start_time }}"
          sync_replication_auto_suspend_timeout_seconds:
            "{{ replication_configuration_linear_1_updated.schedule.
            sync_replication_auto_suspend_timeout_seconds }}"
      - source_location_label: "{{ replication_configuration_linear_2_updated.source_location_label }}"
        remote_location_label: "{{ replication_configuration_linear_2_updated.remote_location_label }}"
        schedule:
          recovery_point_type: "{{ replication_configuration_linear_2_updated.schedule.recovery_point_type }}"
          recovery_point_objective_time_seconds: "{{ replication_configuration_linear_2_updated.schedule.recovery_point_objective_time_seconds | int }}"
          retention:
            linear_retention:
              local: "{{ replication_configuration_linear_2_updated.schedule.retention.local }}"
              remote: "{{ replication_configuration_linear_2_updated.schedule.retention.remote }}"
          start_time: "{{ replication_configuration_linear_2_updated.schedule.start_time }}"
          sync_replication_auto_suspend_timeout_seconds:
            "{{ replication_configuration_linear_2_updated.schedule.
            sync_replication_auto_suspend_timeout_seconds }}"
    category_ids:
      - "{{category_ext_id_1}}"
  register: result
  ignore_errors: true

- name: Status for updating linear retention protection policy
  ansible.builtin.assert:
    that:
      - result.changed == true
      - result.failed == false
      - result.response is defined
      - result.response.ext_id == "{{ todelete[0] }}"
      - result.response.name == "ansible-name-linear-{{random_name}}_updated"
      - result.response.description == "ansible-description-linear-{{random_name}}_updated"
      - result.response.replication_locations[0] == replication_location_1_updated
        or result.response.replication_locations[0] == replication_location_2_updated
      - result.response.replication_locations[1] == replication_location_1_updated
        or result.response.replication_locations[1] == replication_location_2_updated
      - result.response.replication_locations[0] != result.response.replication_locations[1]
      - result.response.replication_configurations[0] == replication_configuration_linear_1_updated
        or result.response.replication_configurations[0] == replication_configuration_linear_2_updated
      - result.response.replication_configurations[1] == replication_configuration_linear_1_updated
        or result.response.replication_configurations[1] == replication_configuration_linear_2_updated
      - result.response.replication_configurations[0] != result.response.replication_configurations[1]
      - result.response.category_ids[0] == "{{category_ext_id_1}}"
    success_msg: "Protection policy updated successfully"
    fail_msg: "Protection policy update failed"

########################################################################################

- name: Test idempotency by updating protection policy with same attributes
  nutanix.ncp.ntnx_protection_policies_v2:
    ext_id: "{{ todelete[0] }}"
    name: "ansible-name-linear-{{random_name}}_updated"
    description: "ansible-description-linear-{{random_name}}_updated"
    replication_locations:
      - "{{ replication_location_1_updated }}"
      - "{{ replication_location_2_updated }}"
    replication_configurations:
      - source_location_label: "{{ replication_configuration_linear_1_updated.source_location_label }}"
        remote_location_label: "{{ replication_configuration_linear_1_updated.remote_location_label }}"
        schedule:
          recovery_point_type: "{{ replication_configuration_linear_1_updated.schedule.recovery_point_type }}"
          recovery_point_objective_time_seconds: "{{ replication_configuration_linear_1_updated.schedule.recovery_point_objective_time_seconds | int }}"
          retention:
            linear_retention:
              local: "{{ replication_configuration_linear_1_updated.schedule.retention.local }}"
              remote: "{{ replication_configuration_linear_1_updated.schedule.retention.remote }}"
          start_time: "{{ replication_configuration_linear_1_updated.schedule.start_time }}"
          sync_replication_auto_suspend_timeout_seconds:
            "{{ replication_configuration_linear_1_updated.schedule.
            sync_replication_auto_suspend_timeout_seconds }}"
      - source_location_label: "{{ replication_configuration_linear_2_updated.source_location_label }}"
        remote_location_label: "{{ replication_configuration_linear_2_updated.remote_location_label }}"
        schedule:
          recovery_point_type: "{{ replication_configuration_linear_2_updated.schedule.recovery_point_type }}"
          recovery_point_objective_time_seconds: "{{ replication_configuration_linear_2_updated.schedule.recovery_point_objective_time_seconds | int }}"
          retention:
            linear_retention:
              local: "{{ replication_configuration_linear_2_updated.schedule.retention.local }}"
              remote: "{{ replication_configuration_linear_2_updated.schedule.retention.remote }}"
          start_time: "{{ replication_configuration_linear_2_updated.schedule.start_time }}"
          sync_replication_auto_suspend_timeout_seconds:
            "{{ replication_configuration_linear_2_updated.schedule.
            sync_replication_auto_suspend_timeout_seconds }}"
    category_ids:
      - "{{category_ext_id_1}}"
  register: result
  ignore_errors: true

- name: Status for idempotency test
  ansible.builtin.assert:
    that:
      - result.changed == false
      - result.failed == false
      - result.msg == "Nothing to change."
    success_msg: "Protection policy updated successfully"
    fail_msg: "Protection policy update failed"

########################################################################################

- name: Update auto retention protection policy
  nutanix.ncp.ntnx_protection_policies_v2:
    ext_id: "{{ todelete[1] }}"
    name: "ansible-name-auto-{{random_name}}_updated"
    description: "ansible-description-auto-{{random_name}}_updated"
    replication_locations:
      - "{{ replication_location_1_updated }}"
      - "{{ replication_location_2_updated }}"
    replication_configurations:
      - source_location_label: "{{ replication_configuration_auto_1_updated.source_location_label }}"
        remote_location_label: "{{ replication_configuration_auto_1_updated.remote_location_label }}"
        schedule:
          recovery_point_type: "{{ replication_configuration_auto_1_updated.schedule.recovery_point_type }}"
          recovery_point_objective_time_seconds: "{{ replication_configuration_auto_1_updated.schedule.recovery_point_objective_time_seconds | int }}"
          retention:
            auto_rollup_retention:
              local:
                snapshot_interval_type: "{{ replication_configuration_auto_1_updated.schedule.retention.local.snapshot_interval_type }}"
                frequency: "{{ replication_configuration_auto_1_updated.schedule.retention.local.frequency }}"
              remote:
                snapshot_interval_type: "{{ replication_configuration_auto_1_updated.schedule.retention.remote.snapshot_interval_type }}"
                frequency: "{{ replication_configuration_auto_1_updated.schedule.retention.remote.frequency }}"
          start_time: "{{ replication_configuration_auto_1_updated.schedule.start_time }}"
          sync_replication_auto_suspend_timeout_seconds: "{{ replication_configuration_auto_1_updated.schedule.sync_replication_auto_suspend_timeout_seconds }}"
      - source_location_label: "{{ replication_configuration_auto_2_updated.source_location_label }}"
        remote_location_label: "{{ replication_configuration_auto_2_updated.remote_location_label }}"
        schedule:
          recovery_point_type: "{{ replication_configuration_auto_2_updated.schedule.recovery_point_type }}"
          recovery_point_objective_time_seconds: "{{ replication_configuration_auto_2_updated.schedule.recovery_point_objective_time_seconds | int }}"
          retention:
            auto_rollup_retention:
              local:
                snapshot_interval_type: "{{ replication_configuration_auto_2_updated.schedule.retention.local.snapshot_interval_type }}"
                frequency: "{{ replication_configuration_auto_2_updated.schedule.retention.local.frequency }}"
              remote:
                snapshot_interval_type: "{{ replication_configuration_auto_2_updated.schedule.retention.remote.snapshot_interval_type }}"
                frequency: "{{ replication_configuration_auto_2_updated.schedule.retention.remote.frequency }}"
          start_time: "{{ replication_configuration_auto_2_updated.schedule.start_time }}"
          sync_replication_auto_suspend_timeout_seconds: "{{ replication_configuration_auto_2_updated.schedule.sync_replication_auto_suspend_timeout_seconds }}"
    category_ids:
      - "{{category_ext_id_2}}"
  register: result
  ignore_errors: true

- name: Status for updating auto retention protection policy
  ansible.builtin.assert:
    that:
      - result.changed == true
      - result.failed == false
      - result.response is defined
      - result.response.ext_id == "{{ todelete[1] }}"
      - result.response.name == "ansible-name-auto-{{random_name}}_updated"
      - result.response.description == "ansible-description-auto-{{random_name}}_updated"
      - result.response.replication_locations[0] == replication_location_1_updated
        or result.response.replication_locations[0] == replication_location_2_updated
      - result.response.replication_locations[1] == replication_location_1_updated
        or result.response.replication_locations[1] == replication_location_2_updated
      - result.response.replication_locations[0] != result.response.replication_locations[1]
      - result.response.replication_configurations[0] == replication_configuration_auto_1_updated
        or result.response.replication_configurations[0] == replication_configuration_auto_2_updated
      - result.response.replication_configurations[1] == replication_configuration_auto_1_updated
        or result.response.replication_configurations[1] == replication_configuration_auto_2_updated
      - result.response.replication_configurations[0] != result.response.replication_configurations[1]
      - result.response.category_ids[0] == "{{category_ext_id_2}}"
    success_msg: "Protection policy updated successfully"
    fail_msg: "Protection policy update failed"

########################################################################################

- name: List all protection policies
  nutanix.ncp.ntnx_protection_policies_info_v2:
  register: result
  ignore_errors: true

- name: Status for listing all protection policies
  ansible.builtin.assert:
    that:
      - result.changed == False
      - result.failed == False
      - result.response is defined
      - result.response | length >= 2
    fail_msg: "Unable to list protection policies"
    success_msg: "Protection policies listed successfully"

########################################################################################

- name: List all protection policies with filter
  nutanix.ncp.ntnx_protection_policies_info_v2:
    filter: "name eq 'ansible-name-auto-{{random_name}}_updated'"
  register: result
  ignore_errors: true

- name: Status for listing all protection policies with filter
  ansible.builtin.assert:
    that:
      - result.changed == False
      - result.failed == False
      - result.response is defined
      - result.response | length == 1
      - result.response[0].name == "ansible-name-auto-{{random_name}}_updated"
    fail_msg: "Unable to list protection policies with filter"
    success_msg: "Protection policies listed successfully"

########################################################################################

- name: List all protection policies with limit
  nutanix.ncp.ntnx_protection_policies_info_v2:
    limit: 1
  register: result
  ignore_errors: true

- name: Status for listing all protection policies with limit
  ansible.builtin.assert:
    that:
      - result.changed == False
      - result.failed == False
      - result.response is defined
      - result.response | length == 1
    fail_msg: "Unable to list protection policies with limit"
    success_msg: "Protection policies listed successfully"

########################################################################################

- name: Fetch protection policy by external ID
  nutanix.ncp.ntnx_protection_policies_info_v2:
    ext_id: "{{ todelete[0] }}"
  register: result
  ignore_errors: true

- name: Status for fetching protection policy by external ID
  ansible.builtin.assert:
    that:
      - result.changed == false
      - result.failed == false
      - result.response is defined
      - result.response.ext_id == "{{ todelete[0] }}"
      - result.response.name == "ansible-name-linear-{{random_name}}_updated"
      - result.response.description == "ansible-description-linear-{{random_name}}_updated"
      - result.response.replication_locations[0] == replication_location_1_updated
        or result.response.replication_locations[0] == replication_location_2_updated
      - result.response.replication_locations[1] == replication_location_1_updated
        or result.response.replication_locations[1] == replication_location_2_updated
      - result.response.replication_locations[0] != result.response.replication_locations[1]
      - result.response.replication_configurations[0] == replication_configuration_linear_1_updated
        or result.response.replication_configurations[0] == replication_configuration_linear_2_updated
      - result.response.replication_configurations[1] == replication_configuration_linear_1_updated
        or result.response.replication_configurations[1] == replication_configuration_linear_2_updated
      - result.response.replication_configurations[0] != result.response.replication_configurations[1]
      - result.response.category_ids[0] == "{{category_ext_id_1}}"
    success_msg: "Protection policy fetched successfully"
    fail_msg: "Protection policy fetch failed"

########################################################################################

- name: Delete all protection policies
  nutanix.ncp.ntnx_protection_policies_v2:
    ext_id: "{{ item }}"
    state: absent
  loop: "{{ todelete }}"
  register: result
  ignore_errors: true

- name: Status for deleting all protection policies
  ansible.builtin.assert:
    that:
      - item.changed == true
      - item.failed == false
      - item.response is defined
      - item.ext_id in todelete
      - item.response.status == "SUCCEEDED"
      - result.results | length == todelete | length
    fail_msg: "Unable to delete protection policies"
    success_msg: "Protection policies deleted successfully"
  loop: "{{ result.results }}"
