---
- name: Start ntnx_prism_v2 tests
  ansible.builtin.debug:
    msg: Start ntnx_prism_v2 tests

#############################################################
# List all clusters to get prism central external ID

- name: List all clusters to get prism central external ID
  nutanix.ncp.ntnx_clusters_info_v2:
    filter: "config/clusterFunction/any(t:t eq Clustermgmt.Config.ClusterFunctionRef'PRISM_CENTRAL')"
  register: result
  ignore_errors: true

- name: Get prism central external ID
  ansible.builtin.set_fact:
    domain_manager_ext_id: "{{ result.response[0].ext_id }}"

#############################################################
# Generate spec using check mode for:
# - Creating backup target object store
# - Updating backup target object store
# - Creating restore source object store
# - Updating restore source object store

- name: Generate spec for creating backup target object store using check mode
  nutanix.ncp.ntnx_pc_backup_target_v2:
    domain_manager_ext_id: "96325874-8523-9865-1478-074816fe2a4f"
    location:
      object_store_location:
        provider_config:
          bucket_name: "test1"
          region: "us-east-1"
          credentials:
            access_key_id: "qwertyuiopasdfgh"
            secret_access_key: "jklzxcvbnm"
        backup_policy:
          rpo_in_minutes: 60
  check_mode: true
  register: result
  ignore_errors: true

- name: Generate spec for creating backup target object store status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.response.location.provider_config.bucket_name == "test1"
      - result.response.location.provider_config.region == "us-east-1"
      - result.response.location.provider_config.credentials.access_key_id == "qwertyuiopasdfgh"
      - result.response.location.backup_policy.rpo_in_minutes == 60
    fail_msg: "Generated spec for creating backup target object store failed"
    success_msg: "Generated spec for creating backup target object store passed"

- name: Generate spec for updating backup target object store using check mode
  nutanix.ncp.ntnx_pc_backup_target_v2:
    ext_id: "84785699-8744-2895-9632-074816fe2a4f"
    domain_manager_ext_id: "14855555-9999-1235-3141-074816fe2a4f"
    location:
      object_store_location:
        provider_config:
          bucket_name: "test2"
          region: "us-east-2"
          credentials:
            access_key_id: "qwertyuiopasdfgh"
            secret_access_key: "jklzxcvbnm"
        backup_policy:
          rpo_in_minutes: 120
  check_mode: true
  register: result
  ignore_errors: true

- name: Generate spec for updating backup target object store status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.response.ext_id == "84785699-8744-2895-9632-074816fe2a4f"
      - result.response.location.provider_config.bucket_name == "test2"
      - result.response.location.provider_config.region == "us-east-2"
      - result.response.location.provider_config.credentials.access_key_id == "qwertyuiopasdfgh"
      - result.response.location.backup_policy.rpo_in_minutes == 120
    fail_msg: "Generated spec for updating backup target object store failed"
    success_msg: "Generated spec for updating backup target object store passed"

- name: Generate spec for creating restore source object store using check mode
  nutanix.ncp.ntnx_pc_restore_source_v2:
    location:
      object_store_location:
        provider_config:
          bucket_name: "test1"
          region: "us-east-1"
          credentials:
            access_key_id: "qwertyuiopasdfgh"
            secret_access_key: "jklzxcvbnm"
  check_mode: true
  register: result
  ignore_errors: true

- name: Generate spec for creating restore source object store status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.response.location.provider_config.bucket_name == "test1"
      - result.response.location.provider_config.region == "us-east-1"
      - result.response.location.provider_config.credentials.access_key_id == "qwertyuiopasdfgh"
    fail_msg: "Generated spec for creating restore source object store failed"
    success_msg: "Generated spec for creating restore source object store passed"

- name: Generate spec for updating restore source object store using check mode
  nutanix.ncp.ntnx_pc_restore_source_v2:
    ext_id: "84785699-8744-2895-9632-074816fe2a4f"
    location:
      object_store_location:
        provider_config:
          bucket_name: "test2"
          region: "us-east-2"
          credentials:
            access_key_id: "qwertyuiopasdfgh"
            secret_access_key: "jklzxcvbnm"
  check_mode: true
  register: result
  ignore_errors: true

- name: Generate spec for updating restore source object store status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.response.ext_id == "84785699-8744-2895-9632-074816fe2a4f"
      - result.response.location.provider_config.bucket_name == "test2"
      - result.response.location.provider_config.region == "us-east-2"
      - result.response.location.provider_config.credentials.access_key_id == "qwertyuiopasdfgh"
    fail_msg: "Generated spec for updating restore source object store failed"
    success_msg: "Generated spec for updating restore source object store passed"

#############################################################
# Check if the backup target object store exists
# If it exists, delete it

- name: Check if backup target object store exists
  nutanix.ncp.ntnx_pc_backup_target_info_v2:
    domain_manager_ext_id: "{{ domain_manager_ext_id }}"
  register: backup_result
  ignore_errors: true

- name: Get external ID of the backup target object store
  ansible.builtin.set_fact:
    backup_target_object_store_ext_id: >-
      {{ backup_result.response
         | selectattr('location.provider_config.bucket_name', 'defined')
         | map(attribute='ext_id')
         | list }}
  when:
    - backup_result.response is not none

- name: Delete backup target object store
  nutanix.ncp.ntnx_pc_backup_target_v2:
    ext_id: "{{ backup_target_object_store_ext_id[0] }}"
    domain_manager_ext_id: "{{ domain_manager_ext_id }}"
    state: absent
  register: result
  ignore_errors: true
  when:
    - backup_target_object_store_ext_id is not none
    - backup_result.response is not none

- name: Delete backup target object store status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.response.status == "SUCCEEDED"
    fail_msg: "Delete backup target object store failed"
    success_msg: "Delete backup target object store passed"
  when:
    - backup_target_object_store_ext_id is not none
    - backup_result.response is not none

# #############################################################
# Create backup target object store
# Get backup target object store

- name: Create backup target object store
  nutanix.ncp.ntnx_pc_backup_target_v2:
    domain_manager_ext_id: "{{ domain_manager_ext_id }}"
    location:
      object_store_location:
        provider_config:
          bucket_name: "{{ s3_bucket.bucket }}"
          region: "{{ s3_bucket.region }}"
          credentials:
            access_key_id: "{{ s3_bucket.access_key }}"
            secret_access_key: "{{ s3_bucket.secret_key }}"
        backup_policy:
          rpo_in_minutes: 60
  register: result
  ignore_errors: true

- name: Create backup target object store status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.response.status == "SUCCEEDED"
    fail_msg: "Create backup target object store failed"
    success_msg: "Create backup target object store passed"

- name: List all backup targets and set backup target object store external ID
  nutanix.ncp.ntnx_pc_backup_target_info_v2:
    domain_manager_ext_id: "{{ domain_manager_ext_id }}"
  register: result
  ignore_errors: true

- name: Get external ID of the backup target object store
  ansible.builtin.set_fact:
    backup_target_object_store_ext_id: >-
      {{ result.response
         | selectattr('location.provider_config.bucket_name', 'defined')
         | list }}
  when:
    - result.response is not none

- name: Get backup target object store status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.response | length > 0
      - backup_target_object_store_ext_id[0].ext_id is defined
      - backup_target_object_store_ext_id[0].location.provider_config.bucket_name == s3_bucket.bucket
      - backup_target_object_store_ext_id[0].location.provider_config.region == s3_bucket.region
      - backup_target_object_store_ext_id[0].location.backup_policy.rpo_in_minutes == 60
    fail_msg: "Get backup target object store failed"
    success_msg: "Get backup target object store passed"

- name: Set backup target object store external ID
  ansible.builtin.set_fact:
    backup_target_object_store_ext_id: "{{ backup_target_object_store_ext_id[0].ext_id }}"

#############################################################
# List all PCs
# Fetch PC details using external ID

- name: List all PCs
  nutanix.ncp.ntnx_pc_config_info_v2:
  register: result
  ignore_errors: true

- name: List all PCs status
  ansible.builtin.assert:
    that:
      - result.changed == false
      - result.failed == false
      - result.response is defined
      - result.response | length > 0
    fail_msg: "List all PCs failed"
    success_msg: "List all PCs passed"

- name: Fetch PC details using external ID
  nutanix.ncp.ntnx_pc_config_info_v2:
    ext_id: "{{ domain_manager_ext_id }}"
  register: result
  ignore_errors: true

- name: Fetch PC details using external ID status
  ansible.builtin.assert:
    that:
      - result.changed == false
      - result.failed == false
      - result.response is defined
      - result.response.ext_id == domain_manager_ext_id
    fail_msg: "Fetch PC details using external ID failed"
    success_msg: "Fetch PC details using external ID passed"

#############################################################
# List all VMs and get PC VM external ID
# Get PC VM External ID
# List all PCs
# Get PC details

- name: List all VMs and get PC VM external ID
  ntnx_vms_info_v2:
  register: result
  ignore_errors: true

- name: Get PC VMs
  set_fact:
    PC_VMs: >-
      {{
        result.response
        | selectattr('description', 'equalto', 'NutanixPrismCentral')
      }}

- name: Set filtered VMs
  set_fact:
    filtered_vm: []

- name: Get PC VM to power off
  ansible.builtin.set_fact:
    filtered_vm: "{{ filtered_vm + [item.0] }}"
  loop: "{{ PC_VMs | subelements('nics') }}"
  when: "'{{ ip }}' in item.1.network_info.ipv4_info.learned_ip_addresses | map(attribute='value')"

- name: Status for Fetching PC VM
  ansible.builtin.assert:
    that:
      - filtered_vm | length == 1
    fail_msg: "Fetching PC VM failed"
    success_msg: "Fetching PC VM passed"

- name: Set PC VM external ID
  ansible.builtin.set_fact:
    pc_vm_external_id: "{{ filtered_vm[0].ext_id }}"

- name: List all PCs
  nutanix.ncp.ntnx_pc_config_info_v2:
    filter: extId eq '{{ domain_manager_ext_id }}'
  register: pc_details
  ignore_errors: true

- name: List all PCs status
  ansible.builtin.assert:
    that:
      - pc_details.changed == false
      - pc_details.failed == false
      - pc_details.response is defined
      - pc_details.response | length > 0
    fail_msg: "List all PCs failed"
    success_msg: "List all PCs passed"

#############################################################
# Power off PC VM

# - name: Power off PC VM
#   ntnx_vms_power_actions_v2:
#     state: power_off
#     ext_id: "{{ pc_vm_external_id }}"
#   register: result
#   ignore_errors: true

############################################################
# Create restore source object store
# Get restore source object store

- name: Create restore source object store
  nutanix.ncp.ntnx_pc_restore_source_v2:
    nutanix_host: "{{ ip_pe }}"
    location:
      object_store_location:
        provider_config:
          bucket_name: "{{ s3_bucket.bucket }}"
          region: "{{ s3_bucket.region }}"
          credentials:
            access_key_id: "{{ s3_bucket.access_key }}"
            secret_access_key: "{{ s3_bucket.secret_key }}"
  register: result
  ignore_errors: true

- name: Create restore source object store status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.ext_id is defined
      - result.response.ext_id == result.ext_id
      - result.response.location.provider_config.bucket_name == s3_bucket.bucket
      - result.response.location.provider_config.region == s3_bucket.region
    fail_msg: "Create restore source object store failed"
    success_msg: "Create restore source object store passed"

- name: Get restore source object store
  nutanix.ncp.ntnx_pc_restore_source_info_v2:
    nutanix_host: "{{ ip_pe }}"
    ext_id: "{{ result.response.ext_id }}"
  register: result
  ignore_errors: true

- name: Get restore source object store status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.response.ext_id == result.ext_id
      - result.response.location.provider_config.bucket_name == s3_bucket.bucket
      - result.response.location.provider_config.region == s3_bucket.region
    fail_msg: "Get restore source object store failed"
    success_msg: "Get restore source object store passed"

- name: Set restore source object store external ID
  ansible.builtin.set_fact:
    restore_source_object_store_ext_id: "{{ result.response.ext_id }}"

#############################################################
# Get all restorable domain managers
# Get restorable domain manager external ID
# List all restore points
# Set restore point external ID

- name: Get all restorable domain managers
  ntnx_pc_restorable_domain_managers_info_v2:
    nutanix_host: "{{ ip_pe }}"
    restore_source_ext_id: "{{ restore_source_object_store_ext_id }}"
  register: result
  ignore_errors: true

- name: Get restorable domain manager external ID
  set_fact:
    domain_manager_details: "{{ result.response | selectattr('ext_id', 'equalto', pc_uuid) | list }}"

- name: List all restore points
  ntnx_pc_restore_points_info_v2:
    nutanix_host: "{{ ip_pe }}"
    restore_source_ext_id: "{{ restore_source_object_store_ext_id }}"
    restorable_domain_manager_ext_id: "{{ domain_manager_details[0].ext_id }}"
  register: result
  ignore_errors: true

- name: Set restore point external ID
  set_fact:
    restore_point_ext_id: "{{ result.response[0].ext_id }}"

# #############################################################
# Restore PC

# - name: Restore PC
#   nutanix.ncp.ntnx_pc_restore_v2:
#     nutanix_host: "{{ ip_pe }}"
#     ext_id: "{{ restore_point_ext_id }}"
#     restore_source_ext_id: "{{ restore_source_object_store_ext_id }}"
#     restorable_domain_manager_ext_id: "{{ domain_manager_details[0].ext_id }}"
#     domain_manger:
#       config:
#         should_enable_lockdown_mode: false
#         build_info:
#           version: "{{ pc_details.response[0].config.build_info.version }}"
#         name: "{{ pc_details.response[0].config.name }}"
#         size: "{{ pc_details.response[0].config.size }}"
#         resource_config:
#           container_ext_ids:
#             - "{{ pc_details.response[0].config.resource_config.container_ext_ids }}"
#       network:
#         external_address:
#           ipv4:
#             value: "{{ pc_details.response[0].network.external_address.ipv4.value }}"
#             prefix_length: 32
#         name_servers:
#           - ipv4:
#               value: "{{ pc_details.response[0].network.name_servers[0].ipv4.value }}"
#               prefix_length: 32
#           - ipv4:
#               value: "{{ pc_details.response[0].network.name_servers[1].ipv4.value }}"
#               prefix_length: 32
#         ntp_servers:
#           - fqdn:
#               value: "{{ pc_details.response[0].network.ntp_servers[0].fqdn.value }}"
#           - fqdn:
#               value: "{{ pc_details.response[0].network.ntp_servers[1].fqdn.value }}"
#           - fqdn:
#               value: "{{ pc_details.response[0].network.ntp_servers[2].fqdn.value }}"
#           - fqdn:
#               value: "{{ pc_details.response[0].network.ntp_servers[3].fqdn.value }}"
#         external_networks:
#           - network_ext_id: "{{ pc_details.response[0].network.external_networks[0].network_ext_id }}"
#             default_gateway:
#               ipv4:
#                 value: "{{ pc_details.response[0].network.external_networks[0].default_gateway.ipv4.value }}"
#                 prefix_length: 32
#             subnet_mask:
#               ipv4:
#                 value: "{{ pc_details.response[0].network.external_networks[0].subnet_mask.ipv4.value }}"
#                 prefix_length: 32
#             ip_ranges:
#               - begin:
#                   ipv4:
#                     value: "{{ pc_details.response[0].network.external_networks[0].ip_ranges[0].begin.ipv4.value }}"
#                     prefix_length: 32
#                 end:
#                   ipv4:
#                     value: "{{ pc_details.response[0].network.external_networks[0].ip_ranges[0].end.ipv4.value }}"
#                     prefix_length: 32
#   register: result
#   ignore_errors: true

#############################################################
# Delete restore source object store

- name: Delete restore source object store
  nutanix.ncp.ntnx_pc_restore_source_v2:
    nutanix_host: "{{ ip_pe }}"
    ext_id: "{{ restore_source_object_store_ext_id }}"
    state: absent
  register: result
  ignore_errors: true

- name: Get restore source object store
  nutanix.ncp.ntnx_pc_restore_source_info_v2:
    nutanix_host: "{{ ip_pe }}"
    ext_id: "{{ restore_source_object_store_ext_id }}"
  register: result
  ignore_errors: true

- name: Verify that restore source object store is deleted
  ansible.builtin.assert:
    that:
      - result.error == "NOT FOUND"
      - result.response.data.error | length > 0
    fail_msg: "Delete restore source object store failed"
    success_msg: "Delete restore source object store passed"

#############################################################
# Delete backup target object store

- name: Delete backup target object store
  nutanix.ncp.ntnx_pc_backup_target_v2:
    ext_id: "{{ backup_target_object_store_ext_id }}"
    domain_manager_ext_id: "{{ domain_manager_ext_id }}"
    state: absent
  register: result
  ignore_errors: true

- name: Delete backup target object store status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.response.status == "SUCCEEDED"
    fail_msg: "Delete backup target object store failed"
    success_msg: "Delete backup target object store passed"
