---
- name: Start ntnx_prism_v2 tests
  ansible.builtin.debug:
    msg: Start ntnx_prism_v2 tests

#############################################################
# List all clusters to get prism central external ID

- name: List all clusters to get prism central external ID
  nutanix.ncp.ntnx_clusters_info_v2:
    filter: "config/clusterFunction/any(t:t eq Clustermgmt.Config.ClusterFunctionRef'PRISM_CENTRAL')"
  register: result
  ignore_errors: true

- name: Get prism central external ID
  ansible.builtin.set_fact:
    domain_manager_ext_id: "{{ result.response[0].ext_id }}"

#############################################################
# Generate spec using check mode for:
# - Deploying a PC
# - Creating backup target cluster
# - Updating backup target cluster
# - Creating restore source cluster
# - Creating restore source object store

- name: Generate spec for deploying a PC using check mode
  nutanix.ncp.ntnx_pc_deploy_v2:
    config:
      name: "test"
      size: "SMALL"
      build_info:
        version: "5.15.0"
      resource_config:
        container_ext_ids:
          - "container-1"
      should_enable_lockdown_mode: true
    network:
      external_address:
        ipv4:
          value: "10.0.0.1"
      name_servers:
        - ipv4:
            value: "10.0.0.2"
        - ipv4:
            value: "10.0.0.3"
      ntp_servers:
        - ipv4:
            value: "10.0.0.4"
        - ipv4:
            value: "10.0.0.5"
      internal_networks:
        - default_gateway:
            ipv4:
              value: "10.0.0.6"
          subnet_mask:
            ipv4:
              value: "10.0.0.7"
          ip_ranges:
            - begin:
                ipv4:
                  value: "10.0.0.8"
              end:
                ipv4:
                  value: "10.0.0.9"
        - default_gateway:
            ipv4:
              value: "10.0.0.10"
          subnet_mask:
            ipv4:
              value: "10.0.0.11"
          ip_ranges:
            - begin:
                ipv4:
                  value: "10.0.0.12"
              end:
                ipv4:
                  value: "10.0.0.13"
      external_networks:
        - default_gateway:
            ipv4:
              value: "10.0.1.0"
          subnet_mask:
            ipv4:
              value: "10.0.2.0"
          ip_ranges:
            - begin:
                ipv4:
                  value: "10.0.3.0"
              end:
                ipv4:
                  value: "10.0.4.0"
          network_ext_id: "16f59216-1234-3333-2222-074816fe2a4f"
        - default_gateway:
            ipv4:
              value: "10.0.5.0"
          subnet_mask:
            ipv4:
              value: "10.0.6.0"
          ip_ranges:
            - begin:
                ipv4:
                  value: "10.0.7.0"
              end:
                ipv4:
                  value: "10.0.8.0"
          network_ext_id: "16f59216-a071-41b7-aee3-074816fe2a4f"
    should_enable_high_availability: true
  delegate_to: localhost
  check_mode: true
  register: result
  ignore_errors: true

- name: Generate spec for deploying a PC status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.response.config.name == "test"
      - result.response.config.size == "SMALL"
      - result.response.config.build_info.version == "5.15.0"
      - result.response.config.resource_config.container_ext_ids == ["container-1"]
      - result.response.config.should_enable_lockdown_mode == true
      - result.response.network.external_address.ipv4.value == "10.0.0.1"
      - result.response.network.name_servers[0].ipv4.value == "10.0.0.2"
      - result.response.network.name_servers[1].ipv4.value == "10.0.0.3"
      - result.response.network.ntp_servers[0].ipv4.value == "10.0.0.4"
      - result.response.network.ntp_servers[1].ipv4.value == "10.0.0.5"
      - result.response.network.internal_networks[0].default_gateway.ipv4.value == "10.0.0.6"
      - result.response.network.internal_networks[0].subnet_mask.ipv4.value == "10.0.0.7"
      - result.response.network.internal_networks[0].ip_ranges[0].begin.ipv4.value == "10.0.0.8"
      - result.response.network.internal_networks[0].ip_ranges[0].end.ipv4.value == "10.0.0.9"
      - result.response.network.internal_networks[1].default_gateway.ipv4.value == "10.0.0.10"
      - result.response.network.internal_networks[1].subnet_mask.ipv4.value == "10.0.0.11"
      - result.response.network.internal_networks[1].ip_ranges[0].begin.ipv4.value == "10.0.0.12"
      - result.response.network.internal_networks[1].ip_ranges[0].end.ipv4.value == "10.0.0.13"
      - result.response.network.external_networks[0].default_gateway.ipv4.value == "10.0.1.0"
      - result.response.network.external_networks[0].subnet_mask.ipv4.value == "10.0.2.0"
      - result.response.network.external_networks[0].ip_ranges[0].begin.ipv4.value == "10.0.3.0"
      - result.response.network.external_networks[0].ip_ranges[0].end.ipv4.value == "10.0.4.0"
      - result.response.network.external_networks[0].network_ext_id == "16f59216-1234-3333-2222-074816fe2a4f"
      - result.response.network.external_networks[1].default_gateway.ipv4.value == "10.0.5.0"
      - result.response.network.external_networks[1].subnet_mask.ipv4.value == "10.0.6.0"
      - result.response.network.external_networks[1].ip_ranges[0].begin.ipv4.value == "10.0.7.0"
      - result.response.network.external_networks[1].ip_ranges[0].end.ipv4.value == "10.0.8.0"
      - result.response.network.external_networks[1].network_ext_id == "16f59216-a071-41b7-aee3-074816fe2a4f"
      - result.response.should_enable_high_availability == true
    fail_msg: "Generated spec for deploying a PC failed"
    success_msg: "Generated spec for deploying a PC passed"

- name: Generate spec for creating backup target cluster using check mode
  nutanix.ncp.ntnx_pc_backup_target_v2:
    domain_manager_ext_id: "96325874-8523-9865-1478-074816fe2a4f"
    location:
      cluster_location:
        config:
          ext_id: "38648904-4859-1258-7485-074816fe2a4f"
  check_mode: true
  register: result
  ignore_errors: true

- name: Generate spec for creating backup target cluster status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.response.location.config.ext_id == "38648904-4859-1258-7485-074816fe2a4f"
    fail_msg: "Generated spec for creating backup target cluster failed"
    success_msg: "Generated spec for creating backup target cluster passed"

- name: Generate spec for updating backup target cluster using check mode
  nutanix.ncp.ntnx_pc_backup_target_v2:
    ext_id: "84785699-8744-2895-9632-074816fe2a4f"
    domain_manager_ext_id: "14855555-9999-1235-3141-074816fe2a4f"
    location:
      cluster_location:
        config:
          ext_id: "31415252-3577-7474-7788-074816fe2a4f"
  check_mode: true
  register: result
  ignore_errors: true

- name: Generate spec for updating backup target cluster status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.response.ext_id == "84785699-8744-2895-9632-074816fe2a4f"
      - result.response.location.config.ext_id == "31415252-3577-7474-7788-074816fe2a4f"
    fail_msg: "Generated spec for updating backup target cluster failed"
    success_msg: "Generated spec for updating backup target cluster passed"

- name: Generate spec for creating restore source cluster using check mode
  nutanix.ncp.ntnx_pc_restore_source_v2:
    location:
      cluster_location:
        config:
          ext_id: "38648904-4859-1258-7485-074816fe2a4f"
  check_mode: true
  register: result
  ignore_errors: true

- name: Generate spec for creating restore source cluster status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.response.location.config.ext_id == "38648904-4859-1258-7485-074816fe2a4f"
    fail_msg: "Generated spec for creating restore source cluster failed"
    success_msg: "Generated spec for creating restore source cluster passed"

- name: Generate spec for creating restore source object store using check mode
  nutanix.ncp.ntnx_pc_restore_source_v2:
    location:
      object_store_location:
        provider_config:
          bucket_name: "test1"
          region: "us-east-1"
          credentials:
            access_key_id: "qwertyuiopasdfgh"
            secret_access_key: "jklzxcvbnm"
  check_mode: true
  register: result
  ignore_errors: true

- name: Generate spec for creating restore source object store status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.response.location.provider_config.bucket_name == "test1"
      - result.response.location.provider_config.region == "us-east-1"
      - result.response.location.provider_config.credentials.access_key_id == "qwertyuiopasdfgh"
    fail_msg: "Generated spec for creating restore source object store failed"
    success_msg: "Generated spec for creating restore source object store passed"

#############################################################
# Check if the backup target cluster exists
# If it exists, delete it

- name: Check if backup target cluster exists
  nutanix.ncp.ntnx_pc_backup_target_info_v2:
    domain_manager_ext_id: "{{ domain_manager_ext_id }}"
  register: backup_result
  ignore_errors: true

- name: Initialize backup_target_cluster_ext_id
  ansible.builtin.set_fact:
    backup_target_cluster_ext_id: []

- name: Get external ID of the backup target cluster
  ansible.builtin.set_fact:
    backup_target_cluster_ext_id: >-
      {{ backup_result.response
         | selectattr('location', 'defined')
         | selectattr('location.config', 'defined')
         | selectattr('location.config.ext_id', 'equalto', cluster.uuid | default(''))
         | map(attribute='ext_id')
         | list }}
  when:
    - backup_result.response is not none

- name: Delete backup target cluster
  nutanix.ncp.ntnx_pc_backup_target_v2:
    ext_id: "{{ backup_target_cluster_ext_id[0] }}"
    domain_manager_ext_id: "{{ domain_manager_ext_id }}"
    state: absent
  register: result
  ignore_errors: true
  when:
    - backup_target_cluster_ext_id | length > 0
    - backup_result.response is not none

- name: Delete backup target cluster status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.response.status == "SUCCEEDED"
    fail_msg: "Delete backup target cluster failed"
    success_msg: "Delete backup target cluster passed"
  when:
    - backup_target_cluster_ext_id | length > 0
    - backup_result.response is not none

#############################################################
# Create backup target cluster
# Get backup target cluster
# Check Idempotency by updating backup target cluster with the same values

- name: Create backup target cluster
  nutanix.ncp.ntnx_pc_backup_target_v2:
    domain_manager_ext_id: "{{ domain_manager_ext_id }}"
    location:
      cluster_location:
        config:
          ext_id: "{{ cluster.uuid }}"
  register: result
  ignore_errors: true

- name: Create backup target cluster status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.response.status == "SUCCEEDED"
    fail_msg: "Create backup target cluster failed"
    success_msg: "Create backup target cluster passed"

- name: List all backup targets and set backup target external ID
  nutanix.ncp.ntnx_pc_backup_target_info_v2:
    domain_manager_ext_id: "{{ domain_manager_ext_id }}"
  register: result
  ignore_errors: true

- name: Get backup target cluster status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.response | length > 0
      - result.response[0].ext_id is defined
      - result.response[0].location.config.ext_id == cluster.uuid
    fail_msg: "Get backup target cluster failed"
    success_msg: "Get backup target cluster passed"

- name: Set backup target cluster external ID
  ansible.builtin.set_fact:
    backup_target_ext_id: "{{ result.response[0].ext_id }}"

- name: Check Idempotency by updating backup target cluster with the same values
  nutanix.ncp.ntnx_pc_backup_target_v2:
    ext_id: "{{ backup_target_ext_id }}"
    domain_manager_ext_id: "{{ domain_manager_ext_id }}"
    location:
      cluster_location:
        config:
          ext_id: "{{ cluster.uuid }}"
  register: result
  ignore_errors: true

- name: Check Idempotency by updating backup target cluster with the same values status
  ansible.builtin.assert:
    that:
      - result.changed == false
      - result.failed == false
      - result.skipped == true
      - result.msg == "Nothing to change."
    fail_msg: "Check Idempotency by updating backup target cluster with the same values failed"
    success_msg: "Check Idempotency by updating backup target cluster with the same values passed"

#############################################################
# List all backup targets
# Fetch backup target details using external ID

- name: List all backup targets
  nutanix.ncp.ntnx_pc_backup_target_info_v2:
    domain_manager_ext_id: "{{ domain_manager_ext_id }}"
  register: result
  ignore_errors: true

- name: List all backup targets status
  ansible.builtin.assert:
    that:
      - result.changed == false
      - result.failed == false
      - result.response is defined
      - result.response | length > 0
    fail_msg: "List all backup targets failed"
    success_msg: "List all backup targets passed"

# Retry until last_sync_time is not none so that restore points are created successfully
- name: Fetch backup target details using external ID until last_sync_time is not none
  nutanix.ncp.ntnx_pc_backup_target_info_v2:
    domain_manager_ext_id: "{{ domain_manager_ext_id }}"
    ext_id: "{{ backup_target_ext_id }}"
  retries: 80
  delay: 30
  until: result.response.last_sync_time is not none
  register: result
  ignore_errors: true

- name: Fetch backup target details using external ID status
  ansible.builtin.assert:
    that:
      - result.changed == false
      - result.failed == false
      - result.response is defined
      - result.response.ext_id == backup_target_ext_id
      - result.response.location.config.ext_id == cluster.uuid
      - result.response.last_sync_time is not none
    fail_msg: "Fetch backup target details using external ID failed"
    success_msg: "Fetch backup target details using external ID passed"

#############################################################
# List all PCs
# Fetch PC details using external ID

- name: List all PCs
  nutanix.ncp.ntnx_pc_config_info_v2:
  register: result
  ignore_errors: true

- name: List all PCs status
  ansible.builtin.assert:
    that:
      - result.changed == false
      - result.failed == false
      - result.response is defined
      - result.response | length > 0
    fail_msg: "List all PCs failed"
    success_msg: "List all PCs passed"

- name: Fetch PC details using external ID
  nutanix.ncp.ntnx_pc_config_info_v2:
    ext_id: "{{ domain_manager_ext_id }}"
  register: result
  ignore_errors: true

- name: Fetch PC details using external ID status
  ansible.builtin.assert:
    that:
      - result.changed == false
      - result.failed == false
      - result.response is defined
      - result.response.ext_id == domain_manager_ext_id
    fail_msg: "Fetch PC details using external ID failed"
    success_msg: "Fetch PC details using external ID passed"

#############################################################
# List all VMs and get PC VM external ID
# Get PC VM External ID
# List all PCs
# Get PC details

- name: List all VMs and get PC VM external ID
  ntnx_vms_info_v2:
  register: result
  ignore_errors: true

- name: Get PC VMs
  set_fact:
    PC_VMs: >-
      {{
        result.response
        | selectattr('description', 'equalto', 'NutanixPrismCentral')
      }}

- name: Set filtered VMs
  set_fact:
    filtered_vm: []

- name: Get PC VM to power off
  ansible.builtin.set_fact:
    filtered_vm: "{{ filtered_vm + [item.0] }}"
  loop: "{{ PC_VMs | subelements('nics') }}"
  when: "'{{ ip }}' in item.1.network_info.ipv4_info.learned_ip_addresses | map(attribute='value')"

- name: Status for Fetching PC VM
  ansible.builtin.assert:
    that:
      - filtered_vm | length == 1
    fail_msg: "Fetching PC VM failed"
    success_msg: "Fetching PC VM passed"

- name: Set PC VM external ID
  ansible.builtin.set_fact:
    pc_vm_external_id: "{{ filtered_vm[0].ext_id }}"

- name: List all PCs
  nutanix.ncp.ntnx_pc_config_info_v2:
    filter: extId eq '{{ domain_manager_ext_id }}'
  register: pc_details
  ignore_errors: true

- name: List all PCs status
  ansible.builtin.assert:
    that:
      - pc_details.changed == false
      - pc_details.failed == false
      - pc_details.response is defined
      - pc_details.response | length > 0
    fail_msg: "List all PCs failed"
    success_msg: "List all PCs passed"

#############################################################
# Create restore source cluster
# Get restore source cluster

- name: Create restore source cluster
  nutanix.ncp.ntnx_pc_restore_source_v2:
    nutanix_host: "{{ ip_pe }}"
    location:
      cluster_location:
        config:
          ext_id: "{{ cluster.uuid }}"
  register: result
  ignore_errors: true

- name: Create restore source cluster status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.ext_id is defined
      - result.response.ext_id == result.ext_id
      - result.response.location.config.ext_id == cluster.uuid
    fail_msg: "Create restore source cluster failed"
    success_msg: "Create restore source cluster passed"

- name: Get restore source cluster
  nutanix.ncp.ntnx_pc_restore_source_info_v2:
    nutanix_host: "{{ ip_pe }}"
    ext_id: "{{ result.response.ext_id }}"
  register: result
  ignore_errors: true

- name: Get restore source cluster status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.response.ext_id == result.ext_id
      - result.response.location.config.ext_id == cluster.uuid
    fail_msg: "Get restore source cluster failed"
    success_msg: "Get restore source cluster passed"

- name: Set restore source cluster external ID
  ansible.builtin.set_fact:
    restore_source_ext_id: "{{ result.response.ext_id }}"

#############################################################
# Get all restorable domain managers
# Get restorable domain manager external ID
# List all restore points
# Set restore point external ID

- name: Get all restorable domain managers
  ntnx_pc_restorable_domain_managers_info_v2:
    nutanix_host: "{{ ip_pe }}"
    restore_source_ext_id: "{{ restore_source_ext_id }}"
  register: result
  ignore_errors: true

- name: Get restorable domain manager external ID
  set_fact:
    domain_manager_details: "{{ result.response | selectattr('ext_id', 'equalto', domain_manager_ext_id) | list }}"

- name: List all restore points
  ntnx_pc_restore_points_info_v2:
    nutanix_host: "{{ ip_pe }}"
    restore_source_ext_id: "{{ restore_source_ext_id }}"
    restorable_domain_manager_ext_id: "{{ domain_manager_details[0].ext_id }}"
  register: result
  ignore_errors: true

- name: Set restore point external ID
  set_fact:
    restore_point_ext_id: "{{ result.response[0].ext_id }}"

#############################################################
# Power off PC VM

- name: Power off PC VM
  ntnx_vms_power_actions_v2:
    state: power_off
    ext_id: "{{ pc_vm_external_id }}"
  register: result
  ignore_errors: true

#############################################################
# Restore PC

- name: Restore PC
  nutanix.ncp.ntnx_pc_restore_v2:
    nutanix_host: "{{ ip_pe }}"
    ext_id: "{{ restore_point_ext_id }}"
    restore_source_ext_id: "{{ restore_source_ext_id }}"
    restorable_domain_manager_ext_id: "{{ domain_manager_details[0].ext_id }}"
    domain_manger:
      config:
        should_enable_lockdown_mode: false
        build_info:
          version: "{{ pc_details.response[0].config.build_info.version }}"
        name: "{{ pc_details.response[0].config.name }}"
        size: "{{ pc_details.response[0].config.size }}"
        resource_config:
          container_ext_ids:
            - "{{ pc_details.response[0].config.resource_config.container_ext_ids }}"
      network:
        external_address:
          ipv4:
            value: "{{ pc_details.response[0].network.external_address.ipv4.value }}"
            prefix_length: 32
        name_servers:
          - ipv4:
              value: "{{ pc_details.response[0].network.name_servers[0].ipv4.value }}"
              prefix_length: 32
          - ipv4:
              value: "{{ pc_details.response[0].network.name_servers[1].ipv4.value }}"
              prefix_length: 32
        ntp_servers:
          - fqdn:
              value: "{{ pc_details.response[0].network.ntp_servers[0].fqdn.value }}"
          - fqdn:
              value: "{{ pc_details.response[0].network.ntp_servers[1].fqdn.value }}"
          - fqdn:
              value: "{{ pc_details.response[0].network.ntp_servers[2].fqdn.value }}"
          - fqdn:
              value: "{{ pc_details.response[0].network.ntp_servers[3].fqdn.value }}"
        external_networks:
          - network_ext_id: "{{ pc_details.response[0].network.external_networks[0].network_ext_id }}"
            default_gateway:
              ipv4:
                value: "{{ pc_details.response[0].network.external_networks[0].default_gateway.ipv4.value }}"
                prefix_length: 32
            subnet_mask:
              ipv4:
                value: "{{ pc_details.response[0].network.external_networks[0].subnet_mask.ipv4.value }}"
                prefix_length: 32
            ip_ranges:
              - begin:
                  ipv4:
                    value: "{{ pc_details.response[0].network.external_networks[0].ip_ranges[0].begin.ipv4.value }}"
                    prefix_length: 32
                end:
                  ipv4:
                    value: "{{ pc_details.response[0].network.external_networks[0].ip_ranges[0].end.ipv4.value }}"
                    prefix_length: 32
  register: result
  ignore_errors: true

- name: Restore PC status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.response.status == "SUCCEEDED"
    fail_msg: "Restore PC failed"
    success_msg: "Restore PC passed"

#############################################################
# Delete restore source cluster

- name: Delete restore source cluster
  nutanix.ncp.ntnx_pc_restore_source_v2:
    nutanix_host: "{{ ip_pe }}"
    ext_id: "{{ restore_source_ext_id }}"
    state: absent
  register: result
  ignore_errors: true

- name: Get restore source cluster
  nutanix.ncp.ntnx_pc_restore_source_info_v2:
    nutanix_host: "{{ ip_pe }}"
    ext_id: "{{ restore_source_ext_id }}"
  register: result
  ignore_errors: true

- name: Verify that restore source cluster is deleted
  ansible.builtin.assert:
    that:
      - result.error == "NOT FOUND"
      - result.response.data.error | length > 0
    fail_msg: "Delete restore source cluster failed"
    success_msg: "Delete restore source cluster passed"

#############################################################
# Delete backup target cluster

- name: List all clusters to get prism central external ID
  nutanix.ncp.ntnx_clusters_info_v2:
    filter: "config/clusterFunction/any(t:t eq Clustermgmt.Config.ClusterFunctionRef'PRISM_CENTRAL')"
  register: result
  ignore_errors: true

- name: Get prism central external ID
  ansible.builtin.set_fact:
    domain_manager_ext_id: "{{ result.response[0].ext_id }}"

- name: Delete backup target cluster
  nutanix.ncp.ntnx_pc_backup_target_v2:
    ext_id: "{{ backup_target_ext_id }}"
    domain_manager_ext_id: "{{ domain_manager_ext_id }}"
    state: absent
  register: result
  ignore_errors: true

- name: Delete backup target cluster status
  ansible.builtin.assert:
    that:
      - result.response is defined
      - result.response.status == "SUCCEEDED"
    fail_msg: "Delete backup target cluster failed"
    success_msg: "Delete backup target cluster passed"
