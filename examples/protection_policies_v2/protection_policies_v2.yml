# Summary:
# This playbook will do the following:
# 1. Create linear retention protection policy
# 2. Create auto retention protection policy
# 3. Create Synchronous replication protection policy
# 4. Create a Protected VM to be promoted
# 5. Create a Protected VM to be restored
# 6. Create Volume group to be promoted
# 7. Create Volume group to be restored
# 8. Associate category with first VG
# 9. Associate category with second VG
# 10. Wait for the first VM to be protected
# 11. Wait for the second VM to be protected
# 12. Sleep for 5 minutes until VMs and VGs are protected
# 13. Get a protected resource
# 14. Promote VM
# 15. Restore VM
# 16. Promote VG
# 17. Restore VG
# 18. Update linear retention protection policy
# 19. List all protection policies
# 20. List all protection policies with filter
# 21. List all protection policies with limit
# 22. Delete linear protection policy
# 23. Delete auto protection policy

- name: Protection policies playbook
  hosts: localhost
  gather_facts: false
  module_defaults:
    group/nutanix.ncp.ntnx:
      nutanix_host: <pc_ip>
      nutanix_username: <user>
      nutanix_password: <pass>
      validate_certs: false
  tasks:
    - name: Generate random names and set variables
      ansible.builtin.set_fact:
        random_name: "{{query('community.general.random_string',numbers=false, special=false,length=12)[0]}}"
        label1: "{{query('community.general.random_string',numbers=false, special=false,length=12)[0]}}"
        label2: "{{query('community.general.random_string',numbers=false, special=false,length=12)[0]}}"
        suffix_name: "ansible-category"
        todelete_categories: []
        todelete: []
        category_ext_id_1: "bbc3555a-5478-1122-4411-bfff196e84e4"
        category_ext_id_2: "e4bda88f-9632-3322-2233-2c0bb00d923d"
        category_ext_id_3: "e4bda88f-1234-5678-3246-2c0bb00d923d"
        category_ext_id_4: "e4bda88f-1234-5678-3246-2c0bb00d923d"
        cluster:
          uuid: "0005b6b1-3b7b-4b3b-8b3b-3b7b3b7b3b7b"
        availability_zone_pc_ip: "10.0.0.1"
        clusters:
          - name: "ansible-test-cluster"
            nodes:
              - cvm_ip: "10.0.0.6"
            config:
              cluster_functions: "AOS"
              redundancy_factor_cluster_crud: 2
              cluster_arch: "X86_64"
              fault_tolerance_state:
                domain_awareness_level_cluster_crud: "DISK"
            network:
              virtual_ip: "10.0.0.7"
        availabilty_zone_pc_uuid: "0005b6b1-3b7b-4b3b-8b3b-3b7b3b7b3b7b"
        pe_ssh_username: "nutanix"
        pe_ssh_password: "nutanix/4u"
        ip_pe: "10.30.30.90"
        virtual_ip_pe: "10.30.30.91"
        username: "admin"
        password: "Nutanix/4u"
        cluster_ext_id: "0005b6b1-3b7b-4b3b-8b3b-3b7b3b7b3b7b"

    - name: Setting Variables
      ansible.builtin.set_fact:
        replication_location_1:
          label: "ansible-label-{{label1}}"
          domain_manager_ext_id: "{{domain_manager_ext_id}}"
          is_primary: true
          replication_sub_location:
            nutanix_cluster:
              cluster_ext_ids:
                - "{{ cluster.uuid }}"

        replication_location_2:
          label: "ansible-label-{{label2}}"
          domain_manager_ext_id: "{{availabilty_zone_pc_uuid}}"
          is_primary: false
          replication_sub_location:
            nutanix_cluster:
              cluster_ext_ids:
                - "{{ cluster_availability_zone.uuid }}"

        replication_location_1_local_clusters:
          label: "ansible-label-local-clusters-{{label1}}"
          domain_manager_ext_id: "{{domain_manager_ext_id}}"
          is_primary: true
          replication_sub_location:
            nutanix_cluster:
              cluster_ext_ids:
                - "{{ cluster.uuid }}"

        replication_location_2_local_clusters:
          label: "ansible-label-local-clusters-{{label2}}"
          domain_manager_ext_id: "{{domain_manager_ext_id}}"
          is_primary: false
          replication_sub_location:
            nutanix_cluster:
              cluster_ext_ids:
                - "{{ cluster_ext_id }}"

        replication_location_1_updated:
          label: "ansible-label-{{label1}}_updated"
          domain_manager_ext_id: "{{domain_manager_ext_id}}"
          is_primary: true
          replication_sub_location:
            nutanix_cluster:
              cluster_ext_ids:
                - "{{ cluster.uuid }}"

        replication_location_2_updated:
          label: "ansible-label-{{label2}}_updated"
          domain_manager_ext_id: "{{availabilty_zone_pc_uuid}}"
          is_primary: false
          replication_sub_location:
            nutanix_cluster:
              cluster_ext_ids:
                - "{{ cluster_availability_zone.uuid }}"

        replication_configuration_linear_1:
          source_location_label: "ansible-label-{{label1}}"
          remote_location_label: "ansible-label-{{label2}}"
          schedule:
            recovery_point_type: "CRASH_CONSISTENT"
            recovery_point_objective_time_seconds: 3600
            retention:
              local: 1
              remote: 1
            start_time:
            sync_replication_auto_suspend_timeout_seconds: 300

        replication_configuration_linear_1_check_mode:
          source_location_label: "ansible-label-{{label1}}"
          remote_location_label: "ansible-label-{{label2}}"
          schedule:
            recovery_point_type: "CRASH_CONSISTENT"
            recovery_point_objective_time_seconds: 3600
            retention:
              local: 1
              remote: 1
            start_time: "13h:11m"
            sync_replication_auto_suspend_timeout_seconds: 300

        replication_configuration_linear_2:
          source_location_label: "ansible-label-{{label2}}"
          remote_location_label: "ansible-label-{{label1}}"
          schedule:
            recovery_point_type: "CRASH_CONSISTENT"
            recovery_point_objective_time_seconds: 3600
            retention:
              local: 1
              remote: 1
            start_time:
            sync_replication_auto_suspend_timeout_seconds: 300

        replication_configuration_linear_2_check_mode:
          source_location_label: "ansible-label-{{label2}}"
          remote_location_label: "ansible-label-{{label1}}"
          schedule:
            recovery_point_type: "CRASH_CONSISTENT"
            recovery_point_objective_time_seconds: 3600
            retention:
              local: 1
              remote: 1
            start_time: "13h:11m"
            sync_replication_auto_suspend_timeout_seconds: 300

        replication_configuration_linear_1_updated:
          source_location_label: "ansible-label-{{label1}}_updated"
          remote_location_label: "ansible-label-{{label2}}_updated"
          schedule:
            recovery_point_type: "CRASH_CONSISTENT"
            recovery_point_objective_time_seconds: 7200
            retention:
              local: 2
              remote: 2
            start_time:
            sync_replication_auto_suspend_timeout_seconds: 90

        replication_configuration_linear_1_updated_check_mode:
          source_location_label: "ansible-label-{{label1}}_updated"
          remote_location_label: "ansible-label-{{label2}}_updated"
          schedule:
            recovery_point_type: "CRASH_CONSISTENT"
            recovery_point_objective_time_seconds: 7200
            retention:
              local: 2
              remote: 2
            start_time: "14h:26m"
            sync_replication_auto_suspend_timeout_seconds: 90

        replication_configuration_linear_2_updated:
          source_location_label: "ansible-label-{{label2}}_updated"
          remote_location_label: "ansible-label-{{label1}}_updated"
          schedule:
            recovery_point_type: "CRASH_CONSISTENT"
            recovery_point_objective_time_seconds: 7200
            retention:
              local: 2
              remote: 2
            start_time:
            sync_replication_auto_suspend_timeout_seconds: 90

        replication_configuration_linear_2_updated_check_mode:
          source_location_label: "ansible-label-{{label2}}_updated"
          remote_location_label: "ansible-label-{{label1}}_updated"
          schedule:
            recovery_point_type: "CRASH_CONSISTENT"
            recovery_point_objective_time_seconds: 7200
            retention:
              local: 2
              remote: 2
            start_time: "14h:26m"
            sync_replication_auto_suspend_timeout_seconds: 90

        replication_configuration_auto_1:
          source_location_label: "ansible-label-{{label1}}"
          remote_location_label: "ansible-label-{{label2}}"
          schedule:
            recovery_point_type: "CRASH_CONSISTENT"
            recovery_point_objective_time_seconds: 60
            retention:
              local:
                snapshot_interval_type: "DAILY"
                frequency: 1
              remote:
                snapshot_interval_type: "DAILY"
                frequency: 1
            start_time:
            sync_replication_auto_suspend_timeout_seconds: 300

        replication_configuration_auto_2:
          source_location_label: "ansible-label-{{label2}}"
          remote_location_label: "ansible-label-{{label1}}"
          schedule:
            recovery_point_type: "CRASH_CONSISTENT"
            recovery_point_objective_time_seconds: 60
            retention:
              local:
                snapshot_interval_type: "DAILY"
                frequency: 1
              remote:
                snapshot_interval_type: "DAILY"
                frequency: 1
            start_time:
            sync_replication_auto_suspend_timeout_seconds: 300

        replication_configuration_auto_1_updated:
          source_location_label: "ansible-label-{{label1}}_updated"
          remote_location_label: "ansible-label-{{label2}}_updated"
          schedule:
            recovery_point_type: "CRASH_CONSISTENT"
            recovery_point_objective_time_seconds: 3600
            retention:
              local:
                snapshot_interval_type: "DAILY"
                frequency: 2
              remote:
                snapshot_interval_type: "DAILY"
                frequency: 2
            start_time:
            sync_replication_auto_suspend_timeout_seconds: 90

        replication_configuration_auto_2_updated:
          source_location_label: "ansible-label-{{label2}}_updated"
          remote_location_label: "ansible-label-{{label1}}_updated"
          schedule:
            recovery_point_type: "CRASH_CONSISTENT"
            recovery_point_objective_time_seconds: 3600
            retention:
              local:
                snapshot_interval_type: "DAILY"
                frequency: 2
              remote:
                snapshot_interval_type: "DAILY"
                frequency: 2
            start_time:
            sync_replication_auto_suspend_timeout_seconds: 90

        replication_configuration_sync_1:
          source_location_label: "ansible-label-{{label1}}"
          remote_location_label: "ansible-label-{{label2}}"
          schedule:
            recovery_point_type: "CRASH_CONSISTENT"
            retention: null
            recovery_point_objective_time_seconds: 0
            start_time:
            sync_replication_auto_suspend_timeout_seconds: 10

        replication_configuration_sync_2:
          source_location_label: "ansible-label-{{label2}}"
          remote_location_label: "ansible-label-{{label1}}"
          schedule:
            recovery_point_type: "CRASH_CONSISTENT"
            retention: null
            recovery_point_objective_time_seconds: 0
            start_time:
            sync_replication_auto_suspend_timeout_seconds: 10

        replication_configuration_sync_local_clusters_1:
          source_location_label: "ansible-label-local-clusters-{{label1}}"
          remote_location_label: "ansible-label-local-clusters-{{label2}}"
          schedule:
            recovery_point_type: "CRASH_CONSISTENT"
            retention: null
            recovery_point_objective_time_seconds: 0
            start_time:
            sync_replication_auto_suspend_timeout_seconds: 10

        replication_configuration_sync_local_clusters_2:
          source_location_label: "ansible-label-local-clusters-{{label2}}"
          remote_location_label: "ansible-label-local-clusters-{{label1}}"
          schedule:
            recovery_point_type: "CRASH_CONSISTENT"
            retention: null
            recovery_point_objective_time_seconds: 0
            start_time:
            sync_replication_auto_suspend_timeout_seconds: 10

    - name: Set prefix name for clusters
      ansible.builtin.set_fact:
        prefix_name: ansible_test

    - name: Set command split for resetting cluster username and password
      ansible.builtin.set_fact:
        pe1_ssh_cmd: sshpass -p '{{ pe_ssh_password }}' ssh -o StrictHostKeyChecking=no {{ pe_ssh_username }}@{{ ip_pe }}
        pe2_ssh_cmd: sshpass -p '{{ clusters[0].pe_password }}' ssh -o StrictHostKeyChecking=no {{ clusters[0].pe_username }}@{{ clusters[0].nodes[0].cvm_ip }}
        reset_username_password: /home/nutanix/prism/cli/ncli user reset-password user-name={{ username }} password={{ password }}
        cluster_status: /usr/local/nutanix/cluster/bin/cluster status
        modify_firewall_cmd_cluster1: >
          /usr/local/nutanix/cluster/bin/modify_firewall -f -r {{ clusters[0].nodes[0].cvm_ip }},
          {{ clusters[0].network.virtual_ip }} -p 2030,2036,2073,2090,8740 -i eth0
        modify_firewall_cmd_cluster2: >
          /usr/local/nutanix/cluster/bin/modify_firewall -f -r {{ ip_pe }},
          {{ virtual_ip_pe }} -p 2030,2036,2073,2090,8740 -i eth0

    - name: Set command for resetting cluster username and password
      ansible.builtin.set_fact:
        reset_command: '{{ pe2_ssh_cmd }} "{{ reset_username_password }}"'
        cluster_status_command: '{{ pe2_ssh_cmd }} "{{ cluster_status }}"'
        modify_firewall_command_cluster1: '{{ pe1_ssh_cmd }} "{{ modify_firewall_cmd_cluster1 }}"'
        modify_firewall_command_cluster2: '{{ pe2_ssh_cmd }} "{{ modify_firewall_cmd_cluster2 }}"'

    - name: Set ansible keys and values
      ansible.builtin.set_fact:
        keys:
          - "{{random_name}}{{suffix_name}}key1"
          - "{{random_name}}{{suffix_name}}key2"
          - "{{random_name}}{{suffix_name}}key3"
          - "{{random_name}}{{suffix_name}}key4"
        values:
          - "{{random_name}}{{suffix_name}}value1"
          - "{{random_name}}{{suffix_name}}value2"
          - "{{random_name}}{{suffix_name}}value3"
          - "{{random_name}}{{suffix_name}}value4"

    ########################################################################################
    # Create cluster for promoting VG

    - name: List all clusters to get prism central external ID
      nutanix.ncp.ntnx_clusters_info_v2:
        filter: "config/clusterFunction/any(t:t eq Clustermgmt.Config.ClusterFunctionRef'PRISM_CENTRAL')"
      register: result
      ignore_errors: true

    - name: Get prism central external ID
      ansible.builtin.set_fact:
        prism_central_external_id: "{{ result.response[0].ext_id }}"

    - name: Discover unconfigured node
      nutanix.ncp.ntnx_discover_unconfigured_nodes_v2:
        address_type: "IPV4"
        ip_filter_list:
          - ipv4:
              value: "{{ clusters[0].nodes[0].cvm_ip }}"
      register: result
      ignore_errors: true

    - name: Run cluster create prechecks
      nutanix.ncp.ntnx_clusters_v2:
        name: "{{ clusters[0].name }}"
        nodes:
          node_list:
            - controller_vm_ip:
                ipv4:
                  value: "{{ clusters[0].nodes[0].cvm_ip }}"
        config:
          cluster_function: "{{ clusters[0].config.cluster_functions }}"
          redundancy_factor: "{{ clusters[0].config.redundancy_factor_cluster_crud }}"
          cluster_arch: "{{ clusters[0].config.cluster_arch }}"
          fault_tolerance_state:
            domain_awareness_level: "{{ clusters[0].config.fault_tolerance_state.domain_awareness_level_cluster_crud }}"
        network:
          external_address:
            ipv4:
              value: "{{ clusters[0].network.virtual_ip }}"
        dryrun: true
        timeout: 1800
      register: result
      ignore_errors: true

    - name: Create cluster name
      ansible.builtin.set_fact:
        cluster_name: "{{random_name}}_{{ prefix_name }}_{{ clusters[0].name }}"

    - name: Check if cluster is unconfigured or not
      ansible.builtin.command: "{{ cluster_status_command }}"
      register: result
      ignore_errors: true
      changed_when: result.rc != 0

    - name: Create cluster with minimum spec
      nutanix.ncp.ntnx_clusters_v2:
        name: "{{cluster_name}}"
        nodes:
          node_list:
            - controller_vm_ip:
                ipv4:
                  value: "{{ clusters[0].nodes[0].cvm_ip }}"
        config:
          cluster_function: "{{ clusters[0].config.cluster_functions }}"
          redundancy_factor: "{{ clusters[0].config.redundancy_factor_cluster_crud }}"
          cluster_arch: "{{ clusters[0].config.cluster_arch }}"
          fault_tolerance_state:
            domain_awareness_level: "{{ clusters[0].config.fault_tolerance_state.domain_awareness_level_cluster_crud }}"
        network:
          external_address:
            ipv4:
              value: "{{ clusters[0].network.virtual_ip }}"
        timeout: 1800
      register: result
      ignore_errors: true

    - name: Reset username and password
      ansible.builtin.command: "{{ reset_command }}"
      register: result
      ignore_errors: true
      changed_when: result.rc != 0

    - name: Run PE PC registration
      nutanix.ncp.ntnx_pc_registration_v2:
        ext_id: "{{ prism_central_external_id }}"
        remote_cluster:
          aos_remote_cluster:
            remote_cluster:
              address:
                ipv4:
                  value: "{{ clusters[0].nodes[0].cvm_ip }}"
              credentials:
                authentication:
                  username: "{{ username }}"
                  password: "{{ password }}"
      register: result
      ignore_errors: true

    - name: Sleep for 1 minute
      ansible.builtin.pause:
        seconds: 60

    - name: Fetch cluster using name
      nutanix.ncp.ntnx_clusters_info_v2:
        filter: name eq '{{ cluster_name }}'
      register: result
      ignore_errors: true

    - name: Set cluster external ID
      ansible.builtin.set_fact:
        cluster_ext_id: "{{ result.response[0].ext_id }}"

    - name: Fetch cluster info using external ID
      nutanix.ncp.ntnx_clusters_info_v2:
        ext_id: "{{ cluster_ext_id }}"
      register: result
      ignore_errors: true

    - name: Modify firewall rules for cluster 1
      ansible.builtin.command: "{{ modify_firewall_command_cluster1 }}"
      register: result
      ignore_errors: true
      changed_when: result.rc != 0

    - name: Modify firewall rules for cluster 2
      ansible.builtin.command: "{{ modify_firewall_command_cluster2 }}"
      register: result
      ignore_errors: true
      changed_when: result.rc != 0

    ########################################################################################

    - name: Create categories for protection policies
      nutanix.ncp.ntnx_categories_v2:
        key: "{{ keys[item] }}"
        value: "{{ values[item] }}"
        description: "ansible-category"
      register: output
      ignore_errors: true
      loop: "{{ range(0, 4) }}"
      loop_control:
        label: "{{ item }}"

    - name: Save external IDs to the list
      ansible.builtin.set_fact:
        todelete_categories: "{{ todelete_categories + [ item.response.ext_id ] }}"
      with_items: "{{ output.results }}"

    - name: Set categories external ids
      ansible.builtin.set_fact:
        category_ext_id_1: "{{ todelete_categories[0] }}"
        category_ext_id_2: "{{ todelete_categories[1] }}"
        category_ext_id_3: "{{ todelete_categories[2] }}"
        category_ext_id_4: "{{ todelete_categories[3] }}"

    - name: List all clusters to get prism central external ID
      nutanix.ncp.ntnx_clusters_info_v2:
        filter: "config/clusterFunction/any(t:t eq Clustermgmt.Config.ClusterFunctionRef'PRISM_CENTRAL')"
      register: result
      ignore_errors: true

    - name: Get prism central external ID
      ansible.builtin.set_fact:
        domain_manager_ext_id: "{{ result.response[0].ext_id }}"

    ########################################################################################

    - name: Generate spec for creating protection policy using check mode
      nutanix.ncp.ntnx_protection_policies_v2:
        name: "ansible-name-test-{{random_name}}"
        description: "ansible-description-test-{{random_name}}"
        replication_locations:
          - "{{ replication_location_1}}"
          - "{{ replication_location_2}}"
        replication_configurations:
          - source_location_label: "{{ replication_configuration_linear_1_check_mode.source_location_label }}"
            remote_location_label: "{{ replication_configuration_linear_1_check_mode.remote_location_label }}"
            schedule:
              recovery_point_type: "{{ replication_configuration_linear_1_check_mode.schedule.recovery_point_type }}"
              recovery_point_objective_time_seconds: "{{ replication_configuration_linear_1_check_mode.schedule.recovery_point_objective_time_seconds | int }}"
              retention:
                linear_retention:
                  local: "{{ replication_configuration_linear_1_check_mode.schedule.retention.local }}"
                  remote: "{{ replication_configuration_linear_1_check_mode.schedule.retention.remote }}"
              start_time: "{{ replication_configuration_linear_1_check_mode.schedule.start_time }}"
              sync_replication_auto_suspend_timeout_seconds: >
                "{{ replication_configuration_linear_1_check_mode.schedule.sync_replication_auto_suspend_timeout_seconds }}"
          - source_location_label: "{{  replication_configuration_linear_2_check_mode.source_location_label }}"
            remote_location_label: "{{ replication_configuration_linear_2_check_mode.remote_location_label }}"
            schedule:
              recovery_point_type: "{{ replication_configuration_linear_2_check_mode.schedule.recovery_point_type }}"
              recovery_point_objective_time_seconds: "{{ replication_configuration_linear_2_check_mode.schedule.recovery_point_objective_time_seconds | int }}"
              retention:
                linear_retention:
                  local: "{{ replication_configuration_linear_2_check_mode.schedule.retention.local }}"
                  remote: "{{ replication_configuration_linear_2_check_mode.schedule.retention.remote }}"
              start_time: "{{ replication_configuration_linear_2_check_mode.schedule.start_time }}"
              sync_replication_auto_suspend_timeout_seconds: >
                "{{ replication_configuration_linear_2_check_mode.schedule.sync_replication_auto_suspend_timeout_seconds }}"
        category_ids:
          - "00000000-0000-0000-0000-000000000000"
      register: result
      ignore_errors: true
      check_mode: true

    ########################################################################################

    - name: Create linear retention protection policy
      nutanix.ncp.ntnx_protection_policies_v2:
        name: "ansible-name-linear-{{random_name}}"
        description: "ansible-description-linear-{{random_name}}"
        replication_locations:
          - "{{ replication_location_1 }}"
          - "{{ replication_location_2 }}"
        replication_configurations:
          - source_location_label: "{{ replication_configuration_linear_1.source_location_label }}"
            remote_location_label: "{{ replication_configuration_linear_1.remote_location_label }}"
            schedule:
              recovery_point_type: "{{ replication_configuration_linear_1.schedule.recovery_point_type }}"
              recovery_point_objective_time_seconds: "{{ replication_configuration_linear_1.schedule.recovery_point_objective_time_seconds | int }}"
              retention:
                linear_retention:
                  local: "{{ replication_configuration_linear_1.schedule.retention.local }}"
                  remote: "{{ replication_configuration_linear_1.schedule.retention.remote }}"
              sync_replication_auto_suspend_timeout_seconds: "{{ replication_configuration_linear_1.schedule.sync_replication_auto_suspend_timeout_seconds }}"
          - source_location_label: "{{ replication_configuration_linear_2.source_location_label }}"
            remote_location_label: "{{ replication_configuration_linear_2.remote_location_label }}"
            schedule:
              recovery_point_type: "{{ replication_configuration_linear_2.schedule.recovery_point_type }}"
              recovery_point_objective_time_seconds: "{{ replication_configuration_linear_2.schedule.recovery_point_objective_time_seconds | int }}"
              retention:
                linear_retention:
                  local: "{{ replication_configuration_linear_2.schedule.retention.local }}"
                  remote: "{{ replication_configuration_linear_2.schedule.retention.remote }}"
              sync_replication_auto_suspend_timeout_seconds: "{{ replication_configuration_linear_2.schedule.sync_replication_auto_suspend_timeout_seconds }}"
        category_ids:
          - "{{category_ext_id_1}}"
      register: result
      ignore_errors: true

    - name: Add retention policy external ID to todelete list
      ansible.builtin.set_fact:
        todelete: "{{ todelete + [result.response.ext_id] }}"

    ########################################################################################

    - name: Create auto retention protection policy
      nutanix.ncp.ntnx_protection_policies_v2:
        name: "ansible-name-auto-{{random_name}}"
        description: "ansible-description-auto-{{random_name}}"
        replication_locations:
          - "{{ replication_location_1 }}"
          - "{{ replication_location_2 }}"
        replication_configurations:
          - source_location_label: "{{ replication_configuration_auto_1.source_location_label }}"
            remote_location_label: "{{ replication_configuration_auto_1.remote_location_label }}"
            schedule:
              recovery_point_type: "{{ replication_configuration_auto_1.schedule.recovery_point_type }}"
              recovery_point_objective_time_seconds: "{{ replication_configuration_auto_1.schedule.recovery_point_objective_time_seconds | int }}"
              retention:
                auto_rollup_retention:
                  local:
                    snapshot_interval_type: "{{ replication_configuration_auto_1.schedule.retention.local.snapshot_interval_type }}"
                    frequency: "{{ replication_configuration_auto_1.schedule.retention.local.frequency }}"
                  remote:
                    snapshot_interval_type: "{{ replication_configuration_auto_1.schedule.retention.remote.snapshot_interval_type }}"
                    frequency: "{{ replication_configuration_auto_1.schedule.retention.remote.frequency }}"
              sync_replication_auto_suspend_timeout_seconds: "{{ replication_configuration_auto_1.schedule.sync_replication_auto_suspend_timeout_seconds }}"
          - source_location_label: "{{ replication_configuration_auto_2.source_location_label }}"
            remote_location_label: "{{ replication_configuration_auto_2.remote_location_label }}"
            schedule:
              recovery_point_type: "{{ replication_configuration_auto_2.schedule.recovery_point_type }}"
              recovery_point_objective_time_seconds: "{{ replication_configuration_auto_2.schedule.recovery_point_objective_time_seconds | int }}"
              retention:
                auto_rollup_retention:
                  local:
                    snapshot_interval_type: "{{ replication_configuration_auto_2.schedule.retention.local.snapshot_interval_type }}"
                    frequency: "{{ replication_configuration_auto_2.schedule.retention.local.frequency }}"
                  remote:
                    snapshot_interval_type: "{{ replication_configuration_auto_2.schedule.retention.remote.snapshot_interval_type }}"
                    frequency: "{{ replication_configuration_auto_2.schedule.retention.remote.frequency }}"
              sync_replication_auto_suspend_timeout_seconds: "{{ replication_configuration_auto_2.schedule.sync_replication_auto_suspend_timeout_seconds }}"
        category_ids:
          - "{{category_ext_id_2}}"
      register: result
      ignore_errors: true

    - name: Add retention policy external ID to todelete list
      ansible.builtin.set_fact:
        todelete: "{{ todelete + [result.response.ext_id] }}"

    ########################################################################################

    - name: Create Synchronous replication protection policy for VM
      nutanix.ncp.ntnx_protection_policies_v2:
        name: "ansible-name-sync-vm-{{random_name}}"
        description: "ansible-description-sync-vm-{{random_name}}"
        replication_locations:
          - "{{ replication_location_1 }}"
          - "{{ replication_location_2 }}"
        replication_configurations:
          - source_location_label: "{{ replication_configuration_sync_1.source_location_label }}"
            remote_location_label: "{{ replication_configuration_sync_1.remote_location_label }}"
            schedule:
              recovery_point_type: "CRASH_CONSISTENT"
              recovery_point_objective_time_seconds: "{{ replication_configuration_sync_1.schedule.recovery_point_objective_time_seconds | int }}"
              sync_replication_auto_suspend_timeout_seconds: "{{ replication_configuration_sync_1.schedule.sync_replication_auto_suspend_timeout_seconds }}"
          - source_location_label: "{{ replication_configuration_sync_2.source_location_label }}"
            remote_location_label: "{{ replication_configuration_sync_2.remote_location_label }}"
            schedule:
              recovery_point_type: "CRASH_CONSISTENT"
              recovery_point_objective_time_seconds: "{{ replication_configuration_sync_2.schedule.recovery_point_objective_time_seconds | int }}"
              sync_replication_auto_suspend_timeout_seconds: "{{ replication_configuration_sync_2.schedule.sync_replication_auto_suspend_timeout_seconds }}"
        category_ids:
          - "{{category_ext_id_3}}"
      register: result
      ignore_errors: true

    - name: Add retention policy external ID to todelete list
      ansible.builtin.set_fact:
        todelete: "{{ todelete + [result.response.ext_id] }}"

    ########################################################################################

    - name: Create Synchronous replication protection policy for VG
      nutanix.ncp.ntnx_protection_policies_v2:
        name: "ansible-name-sync-vg-{{random_name}}"
        description: "ansible-description-sync-vg-{{random_name}}"
        replication_locations:
          - "{{ replication_location_1_local_clusters }}"
          - "{{ replication_location_2_local_clusters }}"
        replication_configurations:
          - source_location_label: "{{ replication_configuration_sync_local_clusters_1.source_location_label }}"
            remote_location_label: "{{ replication_configuration_sync_local_clusters_1.remote_location_label }}"
            schedule:
              recovery_point_type: "CRASH_CONSISTENT"
              recovery_point_objective_time_seconds: >
                "{{ replication_configuration_sync_local_clusters_1.schedule.recovery_point_objective_time_seconds | int }}"
              sync_replication_auto_suspend_timeout_seconds: >
                "{{ replication_configuration_sync_local_clusters_1.schedule.sync_replication_auto_suspend_timeout_seconds }}"
          - source_location_label: "{{ replication_configuration_sync_local_clusters_2.source_location_label }}"
            remote_location_label: "{{ replication_configuration_sync_local_clusters_2.remote_location_label }}"
            schedule:
              recovery_point_type: "CRASH_CONSISTENT"
              recovery_point_objective_time_seconds: >
                "{{ replication_configuration_sync_local_clusters_2.schedule.recovery_point_objective_time_seconds | int }}"
              sync_replication_auto_suspend_timeout_seconds: >
                "{{ replication_configuration_sync_local_clusters_2.schedule.sync_replication_auto_suspend_timeout_seconds }}"
        category_ids:
          - "{{category_ext_id_4}}"
      register: result
      ignore_errors: true

    - name: Add retention policy external ID to todelete list
      ansible.builtin.set_fact:
        todelete: "{{ todelete + [result.response.ext_id] }}"

    ########################################################################################

    - name: Create a Protected VM to be promoted
      nutanix.ncp.ntnx_vms_v2:
        name: "{{ random_name }}_ansible_protected_vm_promote"
        description: "Protected VM for promotion"
        cluster:
          ext_id: "{{ cluster.uuid }}"
        categories:
          - ext_id: "{{ category_ext_id_3 }}"
      register: result
      ignore_errors: true

    - name: Set VM external ID
      ansible.builtin.set_fact:
        vm_ext_id_1: "{{ result.response.ext_id }}"

    - name: Create a Protected VM to be restored
      nutanix.ncp.ntnx_vms_v2:
        name: "{{ random_name }}_ansible_protected_vm_restore"
        description: "Protected VM for restore"
        cluster:
          ext_id: "{{ cluster.uuid }}"
        categories:
          - ext_id: "{{ category_ext_id_2 }}"
      register: result
      ignore_errors: true

    - name: Set VM external ID
      ansible.builtin.set_fact:
        vm_ext_id_2: "{{ result.response.ext_id }}"

    - name: Create Volume group to be promoted
      nutanix.ncp.ntnx_volume_groups_v2:
        name: "{{ random_name }}_ansible_protected_vg_promote"
        description: "Volume group for promotion"
        cluster_reference: "{{ cluster.uuid }}"
      register: result
      ignore_errors: true

    - name: Set VG UUID
      ansible.builtin.set_fact:
        vg1_uuid: "{{ result.ext_id }}"

    - name: Create Volume group to be restored
      nutanix.ncp.ntnx_volume_groups_v2:
        name: "{{ random_name }}_ansible_protected_vg_restore"
        description: "Volume group for restore"
        cluster_reference: "{{ cluster.uuid }}"
      register: result
      ignore_errors: true

    - name: Set VG UUID
      ansible.builtin.set_fact:
        vg2_uuid: "{{ result.ext_id }}"

    - name: Associate category with first VG
      nutanix.ncp.ntnx_volume_groups_categories_v2:
        ext_id: "{{ vg1_uuid }}"
        categories:
          - ext_id: "{{ category_ext_id_4 }}"
            entity_type: "CATEGORY"
      register: result
      ignore_errors: true

    - name: Associate category with second VG
      nutanix.ncp.ntnx_volume_groups_categories_v2:
        ext_id: "{{ vg2_uuid }}"
        categories:
          - ext_id: "{{ category_ext_id_2 }}"
            entity_type: "CATEGORY"
      register: result
      ignore_errors: true

    # Wait for the first VM to be protected
    - name: Fetch VM using ext_id
      nutanix.ncp.ntnx_vms_info_v2:
        ext_id: "{{ vm_ext_id_1 }}"
      register: result
      until: result.response.protection_type == "RULE_PROTECTED"
      retries: 60
      delay: 10
      ignore_errors: true

    # Wait for the second VM to be protected
    - name: Fetch VM using ext_id
      nutanix.ncp.ntnx_vms_info_v2:
        ext_id: "{{ vm_ext_id_2 }}"
      register: result
      until: result.response.protection_type == "RULE_PROTECTED"
      retries: 60
      delay: 10
      ignore_errors: true

    - name: Sleep for 5 minutes until VMs and VGs are protected
      ansible.builtin.pause:
        seconds: 300

    - name: Get a protected resource
      nutanix.ncp.ntnx_protected_resources_info_v2:
        ext_id: "{{ vm_ext_id_1 }}"
      register: result
      ignore_errors: true

    - name: Promote VM
      nutanix.ncp.ntnx_promote_protected_resources_v2:
        nutanix_host: "{{ availability_zone_pc_ip }}"
        ext_id: "{{ vm_ext_id_1 }}"
      register: result
      ignore_errors: true

    - name: Restore VM
      nutanix.ncp.ntnx_restore_protected_resources_v2:
        ext_id: "{{ vm_ext_id_2 }}"
        cluster_ext_id: "{{ cluster.uuid }}"
      register: result
      ignore_errors: true

    - name: Promote VG
      nutanix.ncp.ntnx_promote_protected_resources_v2:
        ext_id: "{{ vg1_uuid }}"
      register: result
      ignore_errors: true

    - name: Restore VG
      nutanix.ncp.ntnx_restore_protected_resources_v2:
        ext_id: "{{ vg2_uuid }}"
        cluster_ext_id: "{{ cluster.uuid }}"
      register: result
      ignore_errors: true

    ########################################################################################

    - name: Generate spec for updating linear retention protection policy using check mode
      nutanix.ncp.ntnx_protection_policies_v2:
        ext_id: "{{ todelete[0] }}"
        name: "ansible-name-linear-{{random_name}}_updated"
        description: "ansible-description-linear-{{random_name}}_updated"
        replication_locations:
          - "{{ replication_location_1_updated }}"
          - "{{ replication_location_2_updated }}"
        replication_configurations:
          - source_location_label: "{{ replication_configuration_linear_1_updated_check_mode.source_location_label }}"
            remote_location_label: "{{ replication_configuration_linear_1_updated_check_mode.remote_location_label }}"
            schedule:
              recovery_point_type: "{{ replication_configuration_linear_1_updated_check_mode.schedule.recovery_point_type }}"
              recovery_point_objective_time_seconds: >
                "{{ replication_configuration_linear_1_updated_check_mode.schedule.recovery_point_objective_time_seconds | int }}"
              retention:
                linear_retention:
                  local: "{{ replication_configuration_linear_1_updated_check_mode.schedule.retention.local }}"
                  remote: "{{ replication_configuration_linear_1_updated_check_mode.schedule.retention.remote }}"
              start_time: "{{ replication_configuration_linear_1_updated_check_mode.schedule.start_time }}"
              sync_replication_auto_suspend_timeout_seconds:
                "{{ replication_configuration_linear_1_updated_check_mode.schedule.
                sync_replication_auto_suspend_timeout_seconds }}"
          - source_location_label: "{{ replication_configuration_linear_2_updated_check_mode.source_location_label }}"
            remote_location_label: "{{ replication_configuration_linear_2_updated_check_mode.remote_location_label }}"
            schedule:
              recovery_point_type: "{{ replication_configuration_linear_2_updated_check_mode.schedule.recovery_point_type }}"
              recovery_point_objective_time_seconds: >
                "{{ replication_configuration_linear_2_updated_check_mode.schedule.recovery_point_objective_time_seconds | int }}"
              retention:
                linear_retention:
                  local: "{{ replication_configuration_linear_2_updated_check_mode.schedule.retention.local }}"
                  remote: "{{ replication_configuration_linear_2_updated_check_mode.schedule.retention.remote }}"
              start_time: "{{ replication_configuration_linear_2_updated_check_mode.schedule.start_time }}"
              sync_replication_auto_suspend_timeout_seconds:
                "{{ replication_configuration_linear_2_updated_check_mode.schedule.
                sync_replication_auto_suspend_timeout_seconds }}"
        category_ids:
          - "{{category_ext_id_1}}"
      register: result
      ignore_errors: true
      check_mode: true

    ########################################################################################

    - name: Update linear retention protection policy
      nutanix.ncp.ntnx_protection_policies_v2:
        ext_id: "{{ todelete[0] }}"
        name: "ansible-name-linear-{{random_name}}_updated"
        description: "ansible-description-linear-{{random_name}}_updated"
        replication_locations:
          - "{{ replication_location_1_updated }}"
          - "{{ replication_location_2_updated }}"
        replication_configurations:
          - source_location_label: "{{ replication_configuration_linear_1_updated.source_location_label }}"
            remote_location_label: "{{ replication_configuration_linear_1_updated.remote_location_label }}"
            schedule:
              recovery_point_type: "{{ replication_configuration_linear_1_updated.schedule.recovery_point_type }}"
              recovery_point_objective_time_seconds: "{{ replication_configuration_linear_1_updated.schedule.recovery_point_objective_time_seconds | int }}"
              retention:
                linear_retention:
                  local: "{{ replication_configuration_linear_1_updated.schedule.retention.local }}"
                  remote: "{{ replication_configuration_linear_1_updated.schedule.retention.remote }}"
              sync_replication_auto_suspend_timeout_seconds:
                "{{ replication_configuration_linear_1_updated.schedule.
                sync_replication_auto_suspend_timeout_seconds }}"
          - source_location_label: "{{ replication_configuration_linear_2_updated.source_location_label }}"
            remote_location_label: "{{ replication_configuration_linear_2_updated.remote_location_label }}"
            schedule:
              recovery_point_type: "{{ replication_configuration_linear_2_updated.schedule.recovery_point_type }}"
              recovery_point_objective_time_seconds: "{{ replication_configuration_linear_2_updated.schedule.recovery_point_objective_time_seconds | int }}"
              retention:
                linear_retention:
                  local: "{{ replication_configuration_linear_2_updated.schedule.retention.local }}"
                  remote: "{{ replication_configuration_linear_2_updated.schedule.retention.remote }}"
              sync_replication_auto_suspend_timeout_seconds:
                "{{ replication_configuration_linear_2_updated.schedule.
                sync_replication_auto_suspend_timeout_seconds }}"
        category_ids:
          - "{{category_ext_id_1}}"
      register: result
      ignore_errors: true

    ########################################################################################

    - name: Test idempotency by updating protection policy with same attributes
      nutanix.ncp.ntnx_protection_policies_v2:
        ext_id: "{{ todelete[0] }}"
        name: "ansible-name-linear-{{random_name}}_updated"
        description: "ansible-description-linear-{{random_name}}_updated"
        replication_locations:
          - "{{ replication_location_1_updated }}"
          - "{{ replication_location_2_updated }}"
        replication_configurations:
          - source_location_label: "{{ replication_configuration_linear_1_updated.source_location_label }}"
            remote_location_label: "{{ replication_configuration_linear_1_updated.remote_location_label }}"
            schedule:
              recovery_point_type: "{{ replication_configuration_linear_1_updated.schedule.recovery_point_type }}"
              recovery_point_objective_time_seconds: "{{ replication_configuration_linear_1_updated.schedule.recovery_point_objective_time_seconds | int }}"
              retention:
                linear_retention:
                  local: "{{ replication_configuration_linear_1_updated.schedule.retention.local }}"
                  remote: "{{ replication_configuration_linear_1_updated.schedule.retention.remote }}"
              sync_replication_auto_suspend_timeout_seconds:
                "{{ replication_configuration_linear_1_updated.schedule.
                sync_replication_auto_suspend_timeout_seconds }}"
          - source_location_label: "{{ replication_configuration_linear_2_updated.source_location_label }}"
            remote_location_label: "{{ replication_configuration_linear_2_updated.remote_location_label }}"
            schedule:
              recovery_point_type: "{{ replication_configuration_linear_2_updated.schedule.recovery_point_type }}"
              recovery_point_objective_time_seconds: "{{ replication_configuration_linear_2_updated.schedule.recovery_point_objective_time_seconds | int }}"
              retention:
                linear_retention:
                  local: "{{ replication_configuration_linear_2_updated.schedule.retention.local }}"
                  remote: "{{ replication_configuration_linear_2_updated.schedule.retention.remote }}"
              sync_replication_auto_suspend_timeout_seconds:
                "{{ replication_configuration_linear_2_updated.schedule.
                sync_replication_auto_suspend_timeout_seconds }}"
        category_ids:
          - "{{category_ext_id_1}}"
      register: result
      ignore_errors: true

    ########################################################################################

    - name: Update auto retention protection policy
      nutanix.ncp.ntnx_protection_policies_v2:
        ext_id: "{{ todelete[1] }}"
        name: "ansible-name-auto-{{random_name}}_updated"
        description: "ansible-description-auto-{{random_name}}_updated"
        replication_locations:
          - "{{ replication_location_1_updated }}"
          - "{{ replication_location_2_updated }}"
        replication_configurations:
          - source_location_label: "{{ replication_configuration_auto_1_updated.source_location_label }}"
            remote_location_label: "{{ replication_configuration_auto_1_updated.remote_location_label }}"
            schedule:
              recovery_point_type: "{{ replication_configuration_auto_1_updated.schedule.recovery_point_type }}"
              recovery_point_objective_time_seconds: "{{ replication_configuration_auto_1_updated.schedule.recovery_point_objective_time_seconds | int }}"
              retention:
                auto_rollup_retention:
                  local:
                    snapshot_interval_type: "{{ replication_configuration_auto_1_updated.schedule.retention.local.snapshot_interval_type }}"
                    frequency: "{{ replication_configuration_auto_1_updated.schedule.retention.local.frequency }}"
                  remote:
                    snapshot_interval_type: "{{ replication_configuration_auto_1_updated.schedule.retention.remote.snapshot_interval_type }}"
                    frequency: "{{ replication_configuration_auto_1_updated.schedule.retention.remote.frequency }}"
              sync_replication_auto_suspend_timeout_seconds: >
                "{{ replication_configuration_auto_1_updated.schedule.sync_replication_auto_suspend_timeout_seconds }}"
          - source_location_label: "{{ replication_configuration_auto_2_updated.source_location_label }}"
            remote_location_label: "{{ replication_configuration_auto_2_updated.remote_location_label }}"
            schedule:
              recovery_point_type: "{{ replication_configuration_auto_2_updated.schedule.recovery_point_type }}"
              recovery_point_objective_time_seconds: "{{ replication_configuration_auto_2_updated.schedule.recovery_point_objective_time_seconds | int }}"
              retention:
                auto_rollup_retention:
                  local:
                    snapshot_interval_type: "{{ replication_configuration_auto_2_updated.schedule.retention.local.snapshot_interval_type }}"
                    frequency: "{{ replication_configuration_auto_2_updated.schedule.retention.local.frequency }}"
                  remote:
                    snapshot_interval_type: "{{ replication_configuration_auto_2_updated.schedule.retention.remote.snapshot_interval_type }}"
                    frequency: "{{ replication_configuration_auto_2_updated.schedule.retention.remote.frequency }}"
              sync_replication_auto_suspend_timeout_seconds: >
                "{{ replication_configuration_auto_2_updated.schedule.sync_replication_auto_suspend_timeout_seconds }}"
        category_ids:
          - "{{category_ext_id_2}}"
      register: result
      ignore_errors: true

    ########################################################################################

    - name: List all protection policies
      nutanix.ncp.ntnx_protection_policies_info_v2:
      register: result
      ignore_errors: true

    ########################################################################################

    - name: List all protection policies with filter
      nutanix.ncp.ntnx_protection_policies_info_v2:
        filter: "name eq 'ansible-name-auto-{{random_name}}_updated'"
      register: result
      ignore_errors: true

    ########################################################################################

    - name: List all protection policies with limit
      nutanix.ncp.ntnx_protection_policies_info_v2:
        limit: 1
      register: result
      ignore_errors: true

    ########################################################################################

    - name: Fetch protection policy by external ID
      nutanix.ncp.ntnx_protection_policies_info_v2:
        ext_id: "{{ todelete[0] }}"
      register: result
      ignore_errors: true

    ########################################################################################

    - name: Disassociate category from first VG
      nutanix.ncp.ntnx_volume_groups_categories_v2:
        ext_id: "{{ vg1_uuid }}"
        state: absent
        categories:
          - ext_id: "{{ category_ext_id_4 }}"
            entity_type: "CATEGORY"
      register: result
      ignore_errors: true

    - name: Disassociate category from second VG
      nutanix.ncp.ntnx_volume_groups_categories_v2:
        ext_id: "{{ vg2_uuid }}"
        state: absent
        categories:
          - ext_id: "{{ category_ext_id_2 }}"
            entity_type: "CATEGORY"
      register: result
      ignore_errors: true

    - name: Fetch all VGs on local cluster
      nutanix.ncp.ntnx_volume_groups_info_v2:
      register: result
      ignore_errors: true

    - name: Filter only protected VGs
      ansible.builtin.set_fact:
        protected_vgs: "{{ result.response | selectattr('name', 'search', random_name ~ '_ansible_protected_vg') | list }}"

    - name: Extract external ids of protected VGs
      ansible.builtin.set_fact:
        protected_vgs_ext_ids: "{{ protected_vgs | map(attribute='ext_id') | list }}"

    - name: Delete all Created VGs on local cluster
      nutanix.ncp.ntnx_volume_groups_v2:
        state: absent
        ext_id: "{{ item }}"
      register: result
      loop: "{{ protected_vgs_ext_ids }}"

    ########################################################################################

    - name: Fetch all VMs on local cluster
      nutanix.ncp.ntnx_vms_info_v2:
      register: result
      ignore_errors: true

    - name: Filter only protected VMs
      ansible.builtin.set_fact:
        protected_vms: "{{ result.response | selectattr('name', 'search', random_name ~ '_ansible_protected_vm') | list }}"

    - name: Extract external ids of protected VMs
      ansible.builtin.set_fact:
        protected_vms_ext_ids: "{{ protected_vms | map(attribute='ext_id') | list }}"

    - name: Delete all Created VMs on local cluster
      nutanix.ncp.ntnx_vms_v2:
        state: absent
        ext_id: "{{ item }}"
      register: result
      loop: "{{ protected_vms_ext_ids }}"

    - name: Fetch all VMs on remote cluster
      nutanix.ncp.ntnx_vms_info_v2:
        nutanix_host: "{{ availability_zone_pc_ip }}"
      register: result
      ignore_errors: true

    - name: Filter only protected VMs
      ansible.builtin.set_fact:
        protected_vms: "{{ result.response | selectattr('name', 'search', random_name ~ '_ansible_protected_vm') | list }}"

    - name: Extract external ids of protected VMs
      ansible.builtin.set_fact:
        protected_vms_ext_ids: "{{ protected_vms | map(attribute='ext_id') | list }}"

    - name: Delete all Created VMs on remote cluster
      nutanix.ncp.ntnx_vms_v2:
        nutanix_host: "{{ availability_zone_pc_ip }}"
        state: absent
        ext_id: "{{ item }}"
      register: result
      loop: "{{ protected_vms_ext_ids }}"
      ignore_errors: true

    ########################################################################################

    - name: Delete all protection policies
      nutanix.ncp.ntnx_protection_policies_v2:
        ext_id: "{{ item }}"
        state: absent
      loop: "{{ todelete }}"
      register: result
      ignore_errors: true

    ########################################################################################
    # Destroy cluster

    - name: Destroy the cluster for cleanup
      nutanix.ncp.ntnx_clusters_v2:
        state: absent
        ext_id: "{{ cluster_ext_id }}"
      register: result
      ignore_errors: true

    ########################################################################################

    - name: Delete Created categories
      nutanix.ncp.ntnx_categories_v2:
        ext_id: "{{item}}"
        state: absent
      register: result
      loop: "{{ todelete_categories }}"
      ignore_errors: true
