---
- name: Prism playbook
  hosts: localhost
  gather_facts: false
  module_defaults:
    group/nutanix.ncp.ntnx:
      nutanix_host: <pc_ip>
      nutanix_username: <user>
      nutanix_password: <pass>
      validate_certs: false
  tasks:
    - name: Setting Variables
      ansible.builtin.set_fact:
        cluster:
          uuid: "00095bb3-1234-1122-5312-ac1f6b6f97e2"
        ip_pe: "10.0.0.1"

    - name: List all clusters to get prism central external ID
      nutanix.ncp.ntnx_clusters_info_v2:
        filter: "config/clusterFunction/any(t:t eq Clustermgmt.Config.ClusterFunctionRef'PRISM_CENTRAL')"
      register: result
      ignore_errors: true

    - name: Get prism central external ID
      ansible.builtin.set_fact:
        domain_manager_ext_id: "{{ result.response[0].ext_id }}"

    - name: Create backup target cluster
      nutanix.ncp.ntnx_pc_backup_target_v2:
        domain_manager_ext_id: "{{ domain_manager_ext_id }}"
        location:
          cluster_location:
            config:
              ext_id: "{{ cluster.uuid }}"
      register: result
      ignore_errors: true

    - name: List all backup targets and set backup target external ID
      nutanix.ncp.ntnx_pc_backup_target_info_v2:
        domain_manager_ext_id: "{{ domain_manager_ext_id }}"
      register: result
      ignore_errors: true

    - name: Set backup target cluster external ID
      ansible.builtin.set_fact:
        backup_target_ext_id: "{{ result.response[0].ext_id }}"

    - name: Create restore source cluster
      nutanix.ncp.ntnx_pc_restore_source_v2:
        nutanix_host: "{{ ip_pe }}"
        location:
          cluster_location:
            config:
              ext_id: "{{ cluster.uuid }}"
      register: result
      ignore_errors: true

    - name: Get restore source cluster
      nutanix.ncp.ntnx_pc_restore_source_info_v2:
        nutanix_host: "{{ ip_pe }}"
        ext_id: "{{ result.response.ext_id }}"
      register: result
      ignore_errors: true

    - name: Set restore source cluster external ID
      ansible.builtin.set_fact:
        restore_source_ext_id: "{{ result.response.ext_id }}"

    - name: List all backup targets
      nutanix.ncp.ntnx_pc_backup_target_info_v2:
        domain_manager_ext_id: "{{ domain_manager_ext_id }}"
      register: result
      ignore_errors: true

    - name: List all backup targets with filter
      nutanix.ncp.ntnx_pc_backup_target_info_v2:
        domain_manager_ext_id: "{{ domain_manager_ext_id }}"
        filter: location/clusterLocation/config/ext_id eq '{{ cluster.uuid }}'
      register: result
      ignore_errors: true

    - name: List all backup targets with limit
      nutanix.ncp.ntnx_pc_backup_target_info_v2:
        domain_manager_ext_id: "{{ domain_manager_ext_id }}"
        limit: 1
      register: result
      ignore_errors: true

    - name: Fetch backup target details using external ID
      nutanix.ncp.ntnx_pc_backup_target_info_v2:
        domain_manager_ext_id: "{{ domain_manager_ext_id }}"
        ext_id: "{{ backup_target_ext_id }}"
      register: result
      ignore_errors: true

    - name: Delete restore source cluster
      nutanix.ncp.ntnx_pc_restore_source_v2:
        nutanix_host: "{{ ip_pe }}"
        ext_id: "{{ restore_source_ext_id }}"
        state: absent
      register: result
      ignore_errors: true

    - name: Delete backup target cluster
      nutanix.ncp.ntnx_pc_backup_target_v2:
        ext_id: "{{ backup_target_ext_id }}"
        domain_manager_ext_id: "{{ domain_manager_ext_id }}"
        state: absent
      register: result
      ignore_errors: true

    - name: List all PCs
      nutanix.ncp.ntnx_pc_config_info_v2:
      register: result
      ignore_errors: true

    - name: Set PC external ID and name
      ansible.builtin.set_fact:
        pc_external_id: "{{ result.response[0].ext_id }}"
        pc_name: "{{ result.response[0].config.name }}"

    - name: List all PCs with filter
      nutanix.ncp.ntnx_pc_config_info_v2:
        filter: name eq '{{ pc_name }}'
      register: result
      ignore_errors: true

    - name: List all PCs with limit
      nutanix.ncp.ntnx_pc_config_info_v2:
        limit: 1
      register: result
      ignore_errors: true

    - name: Fetch PC details using external ID
      nutanix.ncp.ntnx_pc_config_info_v2:
        ext_id: "{{ pc_external_id }}"
      register: result
      ignore_errors: true
