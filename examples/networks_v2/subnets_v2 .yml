---
# Summary:
# This playbook will do:
# 1. Create VLAN subnet without IPAM
# 2. Update VLAN subnet name and IP pools
# 3. Get subnet using ext_id
# 4. Create Overlay Subnet with minimum requirements
# 5. Delete subnet

- name: Subnets playbook
  hosts: localhost
  gather_facts: false
  module_defaults:
    group/nutanix.ncp.ntnx:
      nutanix_host: <pc_ip>
      nutanix_username: <user>
      nutanix_password: <pass>
      validate_certs: false
  tasks:
    - name: Setting Variables
      ansible.builtin.set_fact:
        subnet_name: "integration_test_subnet"
        subnet_uuid: "d7419d65-100e-4c99-a666-ec1431516bbe"
        cluster_uuid: "00061663-9fa0-28ca-185b-ac1f6b6f97e1"
        virtual_switch_uuid: "7c62834e-43f0-4c20-a5d4-cbf36b9a142b"
        vpc_uuid: "2dff5b0a-99c5-46d6-9002-d42439a8b6e5"
        network_id: 222
        ip_address_management:
          network_ip: "10.0.0.1"
          network_prefix: 24
          gateway_ip_address: "10.0.0.2"
          dhcp_server_address: "10.0.0.3"
        ip_address_pools:
          start_address: "10.0.0.4"
          end_address: "10.0.0.5"
          start_address_2: "10.0.0.6"
          end_address_2: "10.0.0.7"

    - name: Create VLAN subnet without IPAM
      ntnx_subnets_v2:
        state: present
        wait: true
        name: "{{ subnet_name }}"
        subnet_type: VLAN
        cluster_reference: "{{ cluster_uuid }}"
        virtual_switch_reference: "{{ virtual_switch_uuid }}"
        network_id: "{{ network_id }}"
      register: result
      ignore_errors: true

    - name: Update VLAN subnet name and IP pools
      ntnx_subnets_v2:
        state: present
        name: "{{ subnet_name }}"
        ext_id: "{{ subnet_uuid }}"
        ip_config:
          - ipv4:
              ip_subnet:
                ip:
                  value: "{{ ip_address_management.network_ip }}"
                prefix_length: "{{ ip_address_management.network_prefix }}"
              default_gateway_ip:
                value: "{{ ip_address_management.gateway_ip_address }}"
              dhcp_server_address:
                value: "{{ ip_address_management.dhcp_server_address }}"
              pool_list:
                - start_ip:
                    value: "{{ ip_address_pools.start_address }}"
                  end_ip:
                    value: "{{ ip_address_pools.end_address }}"
                - start_ip:
                    value: "{{ ip_address_pools.start_address_2 }}"
                  end_ip:
                    value: "{{ ip_address_pools.end_address_2 }}"
      register: result
      ignore_errors: true

    - name: Get subnet using ext_id
      ntnx_subnets_info_v2:
        ext_id: "{{ subnet_uuid }}"
      register: result
      ignore_errors: true

    - name: Create Overlay Subnet with minimum requirements
      ntnx_subnets_v2:
        state: present
        name: "{{ subnet_name }}"
        subnet_type: OVERLAY
        vpc_reference: "{{ vpc_uuid }}"
        ip_config:
          - ipv4:
              ip_subnet:
                ip:
                  value: "{{ ip_address_management.network_ip }}"
                prefix_length: "{{ ip_address_management.network_prefix }}"
              default_gateway_ip:
                value: "{{ ip_address_management.gateway_ip_address }}"
      register: result
      ignore_errors: true

    - name: Delete subnet
      ntnx_subnets_v2:
        state: absent
        ext_id: "{{ subnet_uuid }}"
      register: result
      ignore_errors: true
